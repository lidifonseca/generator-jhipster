/* eslint complexity: ["error", 300] */
import React from 'react';
<%_ if (pagination === 'infinite-scroll')Â { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { convertDateFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
import { connect } from 'react-redux';
import Select from 'react-select';
import { Link, RouteComponentProps } from 'react-router-dom';
import InputMask from "react-input-mask";
import { Button, <% if (searchEngine === 'elasticsearch') { %>InputGroup, <% } %>Col, Row, Table, Label, UncontrolledTooltip, 
<%_ if (typeof notListFilterLayout === 'undefined') {  _%>
  UncontrolledCollapse,
<%_ } _%> CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter,
<%_  if (listButtonsInDropdown === true) { _%> Dropdown, DropdownToggle,  DropdownMenu,  DropdownItem, <%_ } _%> UncontrolledAlert } from 'reactstrap';
import { AvFeedback, AvForm, AvGroup, AvInput<% if (fieldsIsReactAvField) { %>, AvField <% } %> } from
'availity-reactstrap-validation';
import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  <%_ } _%>
  Translate, translate<% if (searchEngine === 'elasticsearch') { %>, ICrudSearchAction<% } %>,
  ICrudGetAllAction, TextFormat
  <%_ if (pagination !== 'no') { _%>
  , getSortState, IPaginationBaseState
  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
  , JhiItemCount
  <%_ }} _%>
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import ReactPaginate from 'react-paginate';

<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
  <%_ baseFiltersModal = true; _%>
  import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody, ModalFooter as PanelFooter } from 'reactstrap';
<%_ } else { _%> 
  import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 



<%_ if (typeof addComponenteBeforeListTable != "undefined" &&  addComponenteBeforeListTable != "false"){ _%>
  import <%= entityReactName %>BeforeComponent from './components/<%= entityFileName %>-before-component';
<%_ } _%>
<%_ if (typeof addComponenteListTable != "undefined" &&  addComponenteListTable != "false"){ _%>
  import <%= entityReactName %>ListComponent from './components/<%= entityFileName %>-list-component';
<%_ } _%>
<%_ if (typeof addComponenteAfterListTable != "undefined" &&  addComponenteAfterListTable != "false"){ _%>
  import <%= entityReactName %>AfterComponent from './components/<%= entityFileName %>-after-component';
<%_ } _%>

<%_ let importEntities = {} _%>  
<%_ if (typeof getEntityListTable != "undefined" &&  getEntityListTable != ""){ _%>
  <%_ const getEntityListTableSplit = getEntityListTable.split(",") _%>  
  <%_ for(const importEntity in getEntityListTableSplit) { _%>
    <%_ const importEntitySplit = getEntityListTableSplit[importEntity].split("-") _%>  
    <%_ if(importEntitySplit.length === 1){ _%>
      <%_ importEntities[importEntitySplit[0]] = 'Entity' _%>
    <%_ } else if(importEntitySplit.length === 2){ _%>
      <%_ importEntities[importEntitySplit[1]] = importEntitySplit[0].trim(" ") _%>
    <%_ } _%>
  <%_ } _%>
<%_ } _%>

<%_ if (Object.keys(importEntities).length > 0){ _%>
  <%_ for(const importEntity in importEntities) { _%>
    <%_ const importEntityPathName = (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)).replace(/(?:^|\.?)([A-Z])/g, function (x,y){return "-" + y.toLowerCase()}).replace(/^_/, ""); _%>
    <%_ if (importEntities[importEntity] == 'Entity'){ _%>
      import {getEntity as getEntity<%= importEntity %>, updateEntity as update<%= importEntity %>} from '../<%= importEntityPathName %>/<%= importEntityPathName %>.reducer';
    <%_ } else if (importEntities[importEntity] == 'List') { _%>
      import {getAllEntities as getEntities<%= importEntity %>, updateEntity as update<%= importEntity %>} from '../<%= importEntityPathName %>/<%= importEntityPathName %>.reducer';
    <%_ } else { _%>
      import {getAllEntities as getEntities<%= importEntity %>, getEntity as getEntity<%= importEntity %>, updateEntity as update<%= importEntity %>} from '../<%= importEntityPathName %>/<%= importEntityPathName %>.reducer';
    <%_ } _%>
  <%_ } _%>
<%_ } _%>


import { IRootState } from 'app/shared/reducers';
import {
  updateEntity,
  get<%= entityReactName %>State, I<%= entityReactName %>BaseState, getEntityFiltersURL,
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntities,
  I<%= entityReactName %>UpdateState as IBaseUpdateState,
  reset,
  getEntity,
  deleteEntity,
  createEntity,
  <%_ if (fieldsContainBlob) { _%>
  setBlob,
  <%_ } _%>
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
 import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (pagination !== 'no') { _%>
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';
<%_ } _%>





<%_
let hasRelationshipQuery = false;
let hasOneToOneNotOwner = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if(rel.relationshipType ==="one-to-one" && rel.ownerSide  === false && typeof baseFilters !== 'undefined' && baseFilters === rel.relationshipName  ){
        hasOneToOneNotOwner = true;
      }
      if (rel.relationshipType === 'many-to-many') {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key]) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add({...uniqueRel, "otherEntityFieldCapitalized": uniqueRel.otherEntityFieldCapitalized, "relationshipFieldName": uniqueRel.relationshipFieldName, "namePlural": uniqueRel.otherEntityNamePlural, "name": uniqueRel.otherEntityName, "otherEntityField": uniqueRel.otherEntityField });
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      formLayoutListCondition: uniqueRel.formLayoutListCondition,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
  <%_ } _%>
import { getAllEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>

<%_ if (typeof generator['extendList'] != "undefined" &&  generator['extendList'] != "false"){ %>
  import { StatePropsExtended, DispatchPropsExtended } from './extended/<%= entityFileName %>';
<%_ } _%>


<%_ if (typeof generator['extendList'] != "undefined" &&  generator['extendList'] != "false"){ %>
  export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, StatePropsExtended, DispatchPropsExtended, RouteComponentProps<{url: string}> {}
<%_ } else { _%>
  export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, RouteComponentProps<{url: string}> {}
<%_ } _%>


<% if (searchEngine === 'elasticsearch' && pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IPaginationBaseState, IBaseUpdateState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (searchEngine === 'elasticsearch') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IBaseUpdateState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IPaginationBaseState, IBaseUpdateState {
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
  showModalDelete?: boolean;
  showModalForm?: boolean;
  showModalEdit?: number;
};
<%_ }  _%>

export class <%= entityReactName %> extends React.Component<I<%= entityReactName %>Props<% if (searchEngine === 'elasticsearch' || pagination !== 'no') { %>, I<%= entityReactName %>State<% } %>> {
  private myFormRef: any;
  private myFormRefNew: any;
  private myFormRefEdit: any;

  constructor(props: I<%= entityReactName %>Props) {
    super(props);
      this.state = {
        showModalDelete: false,
        showModalForm: false,
        showModalEdit: null,
        <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}, <%_ } _%>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        search: '',
        <%_ } _%>
        <%_ if (pagination !== 'no') { _%>
        ...getSortState(this.props.location, ITEMS_PER_PAGE),
        ...get<%= entityReactName %>State(this.props.location)
        <%_ if (typeof baseFilters !== 'undefined' && baseFilters) { _%>
          , <%= baseFilters _%>Id: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>']
          , baseFilters: '<%= baseFilters _%>' 
        <%_ } _%>
        <%_ } _%>,
        <% uniqueRealtionFields.forEach(rel => { %> 
        <%_ if (typeof baseFilters !== 'undefined' && baseFilters == rel.name) { _%>
          <%= rel.name %>SelectValue: parseInt(this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'], 10),
        <%_ }else{ _%> 
          <%= rel.name %>SelectValue: null, 
        <%_ } _%> 
        <% }) %>
        <%_ for (idx in fields) { _%>
          <%= typeof fields[idx].formLayoutCepBr !== 'undefined' && fields[idx].formLayoutCepBr.trim() ? "cepRequest" + fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() + " : null," : "" %>
        <%_ } _%>
        <%_ for (idx in fields) { _%>   
            <%= fields[idx].fieldName %>SelectValue: null,
        <%_ } _%>
        fieldsBase: {
          ...get<%= entityReactName %>State(this.props.location),
          <%_ if (typeof baseFilters !== 'undefined' && baseFilters) { _%>
            <%= baseFilters _%>Id: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'],
            baseFilters: '<%= baseFilters _%>',
          <%_ } _%>  
        },
        <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
        <%_ manyToManyOwners.forEach(val => { _%>
        ids<%= val.relationshipName %>: [],
        <%_ }) _%>
        <%_ relFieldNames.forEach(val => { _%>
          <%= val.relationshipFieldName + val.otherEntityFieldCapitalized %>: null,
        <%_ }) _%>
        isNew: false,
      };
  }


  <%_  if (listButtonsInDropdown === true) { _%>
    toggle = (btn) => {
      const dropdownButtons = this.state.dropdownButtons;
      dropdownButtons[btn] = !dropdownButtons[btn];
      this.setState({dropdownButtons})
    }
  <%_ } _%>


  componentDidMount() {
    <%_ if (pagination !== 'no') { _%>
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.reset();
      <%_ } else { _%>
      this.getEntities();
      <%_ } _%>
    <%_ } else { _%>
    this.props.getEntities();
    <%_ } _%>

    <%_ otherEntityActions.forEach(val => { _%>
      this.props.<%= val.action %>();
    <%_ }) _%>
  }

  cancelFilters = () => {
    this.setState(
      {
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
                <%= listFilterLayout[idx].entity.relationshipName %>Id: '',
            <%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType) ) { _%>
                <%= listFilterLayout[idx].name %>Start: '',
                <%= listFilterLayout[idx].name %>End: '',
              <%_ } else { _%>
                <%= listFilterLayout[idx].name %>: '',
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%>

            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType) ) { _%>
              <%= fields[idx].fieldName %>Start: '',
              <%= fields[idx].fieldName %>End: '',
            <%_ } else { _%>
              <%= fields[idx].fieldName %>: '', 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%>
              <%= rel.relationshipName %>Id: '',
          <%_ }) _%>
        <%_ } _%>
      },
      () => this.sortEntities()
    );
  };
  
  filterEntity = (event, errors, values) => {
    this.setState({
      ...this.state,
      ...values
    }, () => this.sortEntities());
  };
  

  <%_ if (pagination === 'infinite-scroll') { _%>
  componentDidUpdate() {
    if (this.props.updateSuccess) {
      this.reset();
    }
  }
  <%_ } _%>

  <%_ if (searchEngine === 'elasticsearch') { _%>
  search = () => {
    if (this.state.search) {
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.props.reset();
      <%_ } _%>
      <%_ if (pagination !== 'no') { _%>
      this.setState({ activePage: 1 }, () => {
        const { activePage, itemsPerPage, sort, order, search } = this.state;
        this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
      });
      <%_ } else { _%>
      this.props.getSearchEntities(this.state.search);
      <%_ } _%>
    }
  };

  clear = () => {
    <%_ if (pagination === 'infinite-scroll') { _%>
    this.props.reset();
    <%_ } _%>
    this.setState({ search: ''<% if (pagination !== 'no') { %>, activePage: 1<% } %> }, () => {
      this.props.getEntities()
    });
  };

  handleSearch = event => this.setState({ search: event.target.value });
  <%_ } _%>

  <%_ if (pagination === 'infinite-scroll') { _%>
  reset = () => {
    this.props.reset();
    this.setState({ activePage: 1 }, () => {
      this.getEntities();
    });
  };

  handleLoadMore = () => {
    if (window.pageYOffset > 0) {
      this.setState({ activePage: this.state.activePage + 1 }, () => this.getEntities());
    }
  };
  <%_ } _%>

  <%_ if (pagination !== 'no') { _%>
  sort = prop => () => {
    this.setState(
      {
        order: this.state.order === 'asc' ? 'desc' : 'asc',
        sort: prop
      },
      () => <% if (pagination === 'infinite-scroll') { %>{ this.reset(); }<% } else { %>this.sortEntities()<% } %>
    );
  };

  <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
    sortEntities() {
      this.getEntities();
      this.props.history.push(this.props.location.pathname +'?' + getEntityFiltersURL(this.state));
    }
  <%_ } _%>


  <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
  handlePagination = activePage => this.setState({ activePage }, () => this.sortEntities());
  <%_ } _%>

  getEntities = () => {
    this.props.reset();
    <%_ if (searchEngine === 'elasticsearch') { _%>
    const { activePage, itemsPerPage, sort, order, search } = this.state;
    if (search) {
      this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
    } else {
      this.props.getEntities(activePage - 1, itemsPerPage, `${sort},${order}`);
    }
    <%_ } else { _%>
    const {
      <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].name %>Start,
              <%= listFilterLayout[idx].name %>End,
              <%_ } else { _%>
                <%= listFilterLayout[idx].name %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%>
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, 
            <%= fields[idx].fieldName %>End, 
          <%_ } else { _%>
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      activePage, itemsPerPage, sort, order 
    } = this.state;
    this.props.getEntities(
      <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>Start, 
              <%= listFilterLayout[idx].entity.fieldName %>End, 
            <%_ } else { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%> 
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
          <%_ } else { _%> 
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      activePage - 1, itemsPerPage, `${sort},${order}`);
    <%_ } _%>
  };
  <%_ } _%>

  updateEntity = (entity) => {
    const {
       <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].name %>Start,
              <%= listFilterLayout[idx].name %>End,
              <%_ } else { _%>
                <%= listFilterLayout[idx].name %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%>
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, 
            <%= fields[idx].fieldName %>End, 
          <%_ } else { _%>
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      activePage, itemsPerPage, sort, order 
    } = this.state;
    this.props.updateEntity(
      entity, [
      <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>Start, 
              <%= listFilterLayout[idx].entity.fieldName %>End, 
            <%_ } else { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%> 
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
          <%_ } else { _%> 
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      activePage - 1, itemsPerPage, `${sort},${order}`]);
  };


  saveEntity = (event: any, errors: any, values: any) => {
    <%_ if (hasOneToOneNotOwner) { %>errors = errors.filter(v=>v!=="id");<%_ } %>
  <%_ for (idx in fields) {
    const fieldType = fields[idx].fieldType;
    const fieldName = fields[idx].fieldName;
_%>
  <%_ if (fieldType === 'Instant' || fieldType === 'ZonedDateTime')  { _%>
  values.<%=fieldName%> = convertDateTimeToServer(values.<%= fieldName %>);
  <%_ } _%>
  <%_ } _%>

  <% uniqueRealtionFields.forEach(rel => { %>
    <% if(rel.relationshipType === 'many-to-many') { %>          
      const <%= rel.otherEntityNamePlural %> = [];  // <%= rel.relationshipType %> -- <%= rel.ownerSide ? "ownerSide=true" : "ownerSide=false" %>
      this.props.<%= rel.otherEntityNamePlural %>.forEach(e => { if(this.state.<%= rel.name %>SelectValue && this.state.<%= rel.name %>SelectValue.split(",").indexOf(e.id+"") !== -1) { <%= rel.otherEntityNamePlural %>.push(e)}});
    <% } else { %>
        let <%= rel.relationshipFieldName %> = null;  // <%= rel.relationshipType %> -- <%= rel.ownerSide ? "ownerSide=true" : "ownerSide=false" %>
      this.props.<%= rel.otherEntityNamePlural %>.forEach(e => { if(e.id === this.state.<%= rel.name %>SelectValue) { <%= rel.relationshipFieldName %> = e}});
    <% } %>
  <% }) %>

  <%_ for (idx in fields) { _%> 
    <% const rulesValidate = fields[idx].fieldValidateRules ? fields[idx].fieldValidateRules : ""; _%>
    <%_ if(rulesValidate.includes('required') && fields[idx].formLayoutCepBr ){ %> 
      if (!this.state.cepRequest<%- fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>) {
        errors.push(translate('entity.validation.required'));
      }
    <%_ } _%>
  <%_ } _%>

  if (errors.length === 0) {
  const { <%= entityInstance %>Entity } = this.props;
  const entity = {
  ...<%= entityInstance %>Entity,
  ...values,<%_ if (hasOneToOneNotOwner) { %> id:  parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10), <%_ } %>
  <% uniqueRealtionFields.forEach(rel => { %><%= rel.relationshipType !== 'many-to-many' ? rel.relationshipFieldName : rel.otherEntityNamePlural %>, <% }) %>
  <%_ for (idx in fields) { _%>
    <%_ if(fields[idx].formLayoutCepBr) { _%>
        <%= fields[idx].fieldName %>:  this.state.cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>,
    <%_ } else { _%>
      <%_ if (fields[idx].fieldType === 'Boolean') { _%>
          <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue === null ? false : this.state.<%= fields[idx].fieldName %>SelectValue,
      <%_ } else if (fields[idx].fieldIsEnum === true) {
            const values =  fields[idx].fieldValues.replace(/\s/g, '').split(',');  _%>
        <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue === null ? "<%= values[0] %>" : this.state.<%= fields[idx].fieldName %>SelectValue,
      <%_ } else { _%>
          <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue,
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
  }

  const {
    <%_ if (listFilterLayout.length > 0) {  _%>
     <%_ for (idx in listFilterLayout) { _%>
       <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
         <%= listFilterLayout[idx].entity.relationshipName %>Id,
       <%_ } else { _%>
         <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
           <%= listFilterLayout[idx].name %>Start,
           <%= listFilterLayout[idx].name %>End,
           <%_ } else { _%>
             <%= listFilterLayout[idx].name %>,
         <%_ } _%>
       <%_ } _%>
     <%_ } _%>
   <%_ } else {  _%>
     <%_ for (idx in fields) { _%>
       <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
         <%= fields[idx].fieldName %>Start, 
         <%= fields[idx].fieldName %>End, 
       <%_ } else { _%>
         <%= fields[idx].fieldName %>, 
       <%_ } _%>
     <%_ } _%>
     <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
   <%_ } _%>
 } = this.state.fieldsBase;

 if (!values.id) {
  this.props.createEntity(entity, [
    <%_ if (listFilterLayout.length > 0) {  _%>
      <%_ for (idx in listFilterLayout) { _%>
        <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
          <%= listFilterLayout[idx].entity.relationshipName %>Id,
        <%_ } else { _%>
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
            <%= listFilterLayout[idx].entity.fieldName %>Start, 
            <%= listFilterLayout[idx].entity.fieldName %>End, 
          <%_ } else { _%> 
            <%= listFilterLayout[idx].entity.fieldName %>,
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
    <%_ } else {  _%>
      <%_ for (idx in fields) { _%> 
        <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
          <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
        <%_ } else { _%> 
          <%= fields[idx].fieldName %>, 
        <%_ } _%>
      <%_ } _%>
      <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
    <%_ } _%>
    ]);
  } else {
  this.props.updateEntity(entity, [
    <%_ if (listFilterLayout.length > 0) {  _%>
      <%_ for (idx in listFilterLayout) { _%>
        <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
          <%= listFilterLayout[idx].entity.relationshipName %>Id,
        <%_ } else { _%>
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
            <%= listFilterLayout[idx].entity.fieldName %>Start, 
            <%= listFilterLayout[idx].entity.fieldName %>End, 
          <%_ } else { _%> 
            <%= listFilterLayout[idx].entity.fieldName %>,
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
    <%_ } else {  _%>
      <%_ for (idx in fields) { _%> 
        <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
          <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
        <%_ } else { _%> 
          <%= fields[idx].fieldName %>, 
        <%_ } _%>
      <%_ } _%>
      <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
    <%_ } _%>
    ]);
  }
  }
  this.setState({ showModalForm: false });
  this.setState({ showModalEdit: null });
  }


  confirmDelete = event => {

    const {
      <%_ if (listFilterLayout.length > 0) {  _%>
       <%_ for (idx in listFilterLayout) { _%>
         <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
           <%= listFilterLayout[idx].entity.relationshipName %>Id,
         <%_ } else { _%>
           <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
             <%= listFilterLayout[idx].name %>Start,
             <%= listFilterLayout[idx].name %>End,
             <%_ } else { _%>
               <%= listFilterLayout[idx].name %>,
           <%_ } _%>
         <%_ } _%>
       <%_ } _%>
     <%_ } else {  _%>
       <%_ for (idx in fields) { _%>
         <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
           <%= fields[idx].fieldName %>Start, 
           <%= fields[idx].fieldName %>End, 
         <%_ } else { _%>
           <%= fields[idx].fieldName %>, 
         <%_ } _%>
       <%_ } _%>
       <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
     <%_ } _%>
   } = this.state.fieldsBase;
  
   this.props.deleteEntity(this.props.<%= entityInstance %>Entity.id, [
      <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>Start, 
              <%= listFilterLayout[idx].entity.fieldName %>End, 
            <%_ } else { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%> 
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
          <%_ } else { _%> 
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      ]);


    this.setState({ showModalDelete: false });
  }

  renderDelete() {
    const { <%= entityInstance %>Entity } = this.props;
    return  <%= entityInstance %>Entity &&  <%= entityInstance %>Entity.id ?
      <Modal isOpen={this.state.showModalDelete} toggle={() => this.setState({ showModalDelete: false })}>
      <ModalHeader toggle={() => this.setState({ showModalDelete: false })}><Translate contentKey="entity.delete.title">Confirm delete operation</Translate></ModalHeader>
      <ModalBody id="<%= i18nKeyPrefix %>.delete.question">
        <Translate contentKey="<%= i18nKeyPrefix %>.delete.question" interpolate={{ id: <%= entityInstance %>Entity.id }}>
            Are you sure you want to delete this <%= entityClass %>?
        </Translate>
      </ModalBody>
      <ModalFooter>
        <Button color="secondary" onClick={() => this.setState({ showModalDelete: false })}>
          <FontAwesomeIcon icon="ban" />&nbsp;
          <Translate contentKey="<%= i18nKeyPrefix %>.btnCancel">Cancel</Translate>
        </Button>
        <Button id="<%= jhiPrefixDashed %>-confirm-delete-<%= entityInstance %>" color="danger" onClick={this.confirmDelete}>
          <FontAwesomeIcon icon="trash" />&nbsp;
          <Translate contentKey="<%= i18nKeyPrefix %>.btnDelete">Delete</Translate>
        </Button>
      </ModalFooter>
    </Modal> : <> </> 
    ;
  };


  renderNewModal() {
    return (
      <Modal  size={"lg"} isOpen={this.state.showModalForm} toggle={() => this.setState({ showModalForm: false })}>
      <ModalHeader toggle={() => this.setState({ showModalForm: false })}>
        { this.renderHeaderUpdate({}, true) }
      </ModalHeader>
      <AvForm ref={el => (this.myFormRefNew = el)}  model={{        
        <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
      }}  onSubmit={this.saveEntity}>
      <ModalBody>
        { this.renderBodyUpdate({}, true) }
      </ModalBody>
      <ModalFooter>
        <Button color="secondary" onClick={() => this.setState({ showModalForm: false })}>
          <FontAwesomeIcon icon="ban" />&nbsp;
          <Translate contentKey="<%= i18nKeyPrefix %>.btnCancel">Cancel</Translate>
        </Button> 
        <Button color="primary" id="save-entity" onClick={() => this.myFormRefNew && this.myFormRefNew.submit()} className="float-right jh-create-entity">
          <FontAwesomeIcon icon="save" />&nbsp;
          <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
        </Button>
      </ModalFooter>
      </AvForm>
    </Modal>
    );
  };
  

  openDeleteModal(v) {
    this.props.getEntity(v.id);
    this.setState({ showModalDelete: true });
  };
  

  openUpdateModal(v) {
    this.props.getEntity(v.id);
    this.setState({ showModalEdit: v.id });
  };
  

  renderUpdateModal() {
    const { <%= entityInstance %>Entity } = this.props;
    return  <%= entityInstance %>Entity &&  <%= entityInstance %>Entity.id ?
      <Modal size={"lg"} isOpen={this.state.showModalEdit === <%= entityInstance %>Entity.id } toggle={() => this.setState({ showModalEdit: null })}>
      <ModalHeader toggle={() => this.setState({ showModalEdit: null })}>
        { this.renderHeaderUpdate(<%= entityInstance %>Entity, false) }
      </ModalHeader>
        <AvForm ref={el => (this.myFormRefEdit = el)} model={{
          ...<%= entityInstance %>Entity, 
          <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
        }}  onSubmit={this.saveEntity}>
        <ModalBody>
          { this.renderBodyUpdate(<%= entityInstance %>Entity, false) }
        </ModalBody>
        <ModalFooter>
          <Button color="secondary" onClick={() => this.setState({ showModalEdit: null })}>
            <FontAwesomeIcon icon="ban" />&nbsp;
            <Translate contentKey="<%= i18nKeyPrefix %>.btnCancel">Cancel</Translate>
          </Button>
          <Button color="primary" id="save-entity" onClick={() => this.myFormRefEdit && this.myFormRefEdit.submit()} className="float-right jh-create-entity">
            <FontAwesomeIcon icon="save" />&nbsp;
            <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
          </Button>
        </ModalFooter>
      </AvForm>
    </Modal> : <> </> 
    ;
  };



  renderHeaderUpdate(<%= entityInstance %>Entity, isNew) {
    const { <% uniqueRealtionFields.forEach(rel => { %> <%= rel.namePlural %>,<% }) %> loading } = this.props;

    <%_ for (var i = 0; i < blobFields.length; i++) { _%>
    <%_
    const b = blobFields[i];
    if (i === 0) {
  _%>
    const {
    <%_ } _%>
    <%= b.fieldName %>
    <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
    , <%= b.fieldName %>ContentType
    , <%= b.fieldName %>Base64
    <%_ } _%>
    <%_ if (i+1 === blobFields.length) { _%>
    } = <%= entityInstance %>Entity;
    <%_ } else { _%>
    ,
    <%_ } _%>
    <%_ } _%>
    const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;

    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>
    
    return (
      <> 
      <div id="page-heading">
        <span className="page-header ml-3">
            {isNew ? (
              <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">Create a <%= entityClass %></Translate>
            ) : (
              <Translate contentKey="<%= i18nKeyPrefix %>.home.editLabel">Edit a <%= entityClass %></Translate>
            )}
          
        </span>
      </div>
      </>
    )
    }
    renderBodyUpdate(<%= entityInstance %>Entity,isNew) {
    const { <% uniqueRealtionFields.forEach(rel => {
  %> <%= rel.namePlural %>,<% }) %> loading } = this.props;

    <%_ for (var i = 0; i < blobFields.length; i++) { _%>
    <%_
    const b = blobFields[i];
    if (i === 0) {
  _%>
    const {
    <%_ } _%>
    <%= b.fieldName %>
    <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
    , <%= b.fieldName %>ContentType
    , <%= b.fieldName %>Base64
    <%_ } _%>
    <%_ if (i+1 === blobFields.length) { _%>
    } = <%= entityInstance %>Entity;
    <%_ } else { _%>
    ,
    <%_ } _%>
    <%_ } _%>
    const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;

    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>
    
    return (
      <> 
  
      <Row className="justify-content-center">
        <Col md="11">
        { loading ? <p>Loading...</p> :
        <div>
          { !isNew ?
          <AvGroup>
            <Row>
              {/*
              <Col md="3">
              <Label className="mt-2" for="<%= entityFileName %>-id">
                <Translate contentKey="global.field.id">ID</Translate>
              </Label>
              </Col> */}
              <Col md="12">
                <AvInput id="<%= entityFileName %>-id" type="hidden" className="form-control" name="id" required readOnly />
              </Col>
            </Row>
          </AvGroup> 
          : null
          }
          <%_ if (formTabs.length === 0) { _%>
            <Row>
                <%_ if (formLayout.length > 0) {  _%>
                    <%_ for (idx in formLayout) {  _%>
                      <%_ if(formLayout[idx].type == 'field'){ _%>
                          <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                        <%_ } else { _%>
                          <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                        <%_ }_%>
                    <%_ } _%>
                <%_ } else { _%>
                    <%_ for (idx in fields) { _%> 
                        <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                    <%_ } _%>
                    <%_ relationships.forEach(rel => { _%> 
                        <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                    <%_ }) _%>
                <%_ } _%>
            </Row>
          <%_ } else { _%>
          { !isNew ? <Nav tabs>
            <%_ for (idx in formTabs) { _%>
            <NavItem>
              <NavLink className={classnames({ active: this.state.activeTab===<%= idx %> })} onClick={()=> {
                this.tabsNext(<%= idx %>); }}
                >
                <span className="d-sm-none"><Translate contentKey="<%= i18nKeyPrefix %>.<%= formTabs[idx] %>"><%= formTabs[idx] %></Translate></span>
                <span className="d-sm-block d-none"><Translate contentKey="<%= i18nKeyPrefix %>.<%= formTabs[idx] %>"><%= formTabs[idx] %></Translate></span>
              </NavLink>
            </NavItem>
            <%_ } _%>
            <%_ if(defaultFormTab) { _%>
            <NavItem>
              <NavLink className={classnames({ active: this.state.activeTab===<%= formTabs.length %> })}
                onClick={()=> { this.tabsNext(<%= formTabs.length %>); }}
                >
                <span className="d-sm-none">Default</span>
                <span className="d-sm-block d-none">Default</span>
              </NavLink>
            </NavItem>
            <%_ } _%>
          </Nav> : null }
          <TabContent activeTab={this.state.activeTab}>
            <%_ for (iTabs in formTabs) { _%>
              <TabPane tabId={<%= iTabs %>}>
                  { isNew ?
                  <Row className="justify-content-center mb-3">
                    <Col md="12">
                    <h2 id="<%= i18nKeyPrefix %>.home.formTabs_<%= idx %>">
                      <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.<%= formTabs[iTabs] %>">
                        <%= formTabs[iTabs] %>
                      </Translate>                        
                    </h2>
                    </Col>
                  </Row> : null }

                  <Row>
                    <%_ if (formLayout.length > 0) {  _%>
                          <%_ for (idx in formLayout) { _%>
                            <%_ if(formTabs[iTabs] === formLayout[idx].entity['formTab']) { _%>
                              <%_ if(formLayout[idx].type == 'field'){_%>
                                <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                              <%_ } else {_%>
                                <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                              <%_ }_%>
                            <%_ } _%>
                          <%_ } _%>
                    <%_ } else { _%>
                          <%_ for (idx in fields) { _%>
                            <%_ if(formTabs[iTabs] === fields[idx]['formTab']) { _%>
                                  <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                            <%_ } _%>
                          <%_ } _%>
                          <%_ relationships.forEach(rel => { _%>
                            <%_ if(formTabs[iTabs] === rel['formTab']) {  _%>
                              <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                            <%_ } _%>
                          <%_ }) _%>
                    <%_ } _%>
                  </Row> 

                  <%_ if(Number.parseInt(iTabs, 10) + 1 < formTabs.length + (defaultFormTab ? 1 : 0)  ) { _%>
                  { isNew ?
                  <Button color="primary" className={"float-right jh-create-entity"} onClick={()=> {
                    this.tabsNext(<%= Number.parseInt(iTabs, 10) + 1 %>, <%= Number.parseInt(iTabs, 10) %>); }}
                    >
                    <span className="d-sm-none">
                      <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>">
                        <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                      </Translate>
                    </span>
                    <span className="d-sm-block d-none">
                      <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>">
                        <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                      </Translate>
                      &nbsp;
                      <FontAwesomeIcon icon="arrow-right" />
                    </span>
                  </Button>
                  : null }
                  <%_ } else { _%>
                  { isNew ?
                  <Button color="primary" id="save-entity" type="submit" 
                    className="btn btn-primary float-right jh-create-entity">
                    <FontAwesomeIcon icon="save" />&nbsp;
                    <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
                  </Button>
                  : null }
                  <%_ } _%>

                  <%_ if(iTabs > 0 ) { _%>
                  { isNew ?
                  <Button color="info" className={"float-right jh-create-entity"} onClick={()=> {
                    this.tabsNext(<%= Number.parseInt(iTabs, 10) - 1 %>); }}
                    >

                    <span className="d-sm-none"> 
                      <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) - 1] %>">
                        <%= formTabs[Number.parseInt(iTabs, 10) - 1] %> 
                      </Translate>
                    </span>
                    <span className="d-sm-block d-none">
                      <FontAwesomeIcon icon="arrow-left" />&nbsp;
                      <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) - 1] %>">
                        <%= formTabs[Number.parseInt(iTabs, 10) - 1] %>
                      </Translate>
                    </span>
                  </Button>
                  : null }
                  <%_ } _%>
                </TabPane>
            <%_ } _%>
            <%_ if(defaultFormTab) { _%>
            <TabPane tabId={<%= formTabs.length %>}>
              { isNew ?
              <Row className="justify-content-center mb-3">
                <Col md="12">
                <h2 id="<%= i18nKeyPrefix %>.home.formTabs_default">
                  <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.Default">
                    Default
                  </Translate>
                </h2>
                </Col>
              </Row> : null }

              <%_ if (formLayout.length > 0) {  _%>
                      <%_ for (idx in formLayout) {  _%>
                        <%_ if(!formLayout[idx].entity['formTab'] || formLayout[idx].entity['formTab'] === "default") {  _%>
                          <%_ if(formLayout[idx].type == 'field'){ _%>
                            <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                          <%_ } else { _%>
                            <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                          <%_ } _%>
                        <%_ }  _%>
                      <%_ } _%>
              <%_ } else { _%>
                <%_ for (idx in fields) { _%> 
                  <%_ if(!fields[idx]['formTab'] || fields[idx]['formTab'] === "default") {  _%>
                    <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                  <%_ } _%>
                <%_ } _%>
                <%_ relationships.forEach(rel => { _%> 
                  <%_ if(!rel['formTab'] || rel['formTab'] === "default") {  _%>
                    <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                  <%_ } _%>
                <%_  }) _%>
              <%_ } _%>


              { isNew ?
              <Button color="primary" id="save-entity" type="submit"
                className="btn btn-primary float-right jh-create-entity">
                <FontAwesomeIcon icon="save" />&nbsp;
                <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
              </Button>
              : null }

              <%_ if(formTabs.length > 0 ) { _%>
              { isNew ?
              <Button color="info" className={"float-right jh-create-entity "}
                             onClick={() => { this.tabsNext(<%= formTabs.length -1 %>); }}
                             >
                <span className=" d-sm-none"> 
                  <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[formTabs.length - 1] %>">
                    <%= formTabs[formTabs.length - 1] %>
                  </Translate>
                </span>
                <span className="d-sm-block d-none">
                  <FontAwesomeIcon icon="arrow-left" />&nbsp;
                  <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[formTabs.length - 1] %>">
                    <%= formTabs[formTabs.length - 1] %>
                  </Translate>
                </span>
              </Button>
              : null }
              <%_ } _%>

            </TabPane>
            <%_ } _%>

          </TabContent>
          <%_ } _%>

        </div>

        }
        </Col>
      </Row>

      </>
    )
    }




  renderHeader() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel.namePlural %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      <div id="page-heading">
        <span className="page-header"><%= entityClassPluralHumanized %></span>
          <%_ if(typeof notListFilterLayout === 'undefined') { _%>
            <Button id="togglerFilter<%= entityReactName %>" color="primary" className="float-right jh-create-entity">
              <%_ if(typeof btnOpenFilter !== 'undefined') { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.btnOpenFilter"><%= btnOpenFilter %></Translate>
              <%_ } else { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.home.btn_filter_open">Filters</Translate>
              <%_ } _%>
              &nbsp;
            <FontAwesomeIcon icon="caret-down" />
          </Button>  &nbsp;
          <%_ } _%>


          <%_ if (typeof listTopButtons !== "undefined")  { _%>
            <%_ for (idx in listTopButtons) { _%>
              <%_ const attrib = listTopButtons[idx].attributes; _%>
                <Button className="float-right jh-create-entity" tag={<%=attrib['tag'] %>} to={<%=attrib['to'] %>} color="<%=attrib['color'] %>" size="<%=attrib['size'] %>">
                  <FontAwesomeIcon icon="<%=attrib['icon'] %>" /> <span className="d-none d-md-inline">
                    <Translate contentKey="<%= i18nKeyPrefix %>.listTopButtons.<%=listTopButtons[idx].name %>"><%=attrib['text'] %></Translate></span>
                </Button>
            <%_ } _%>
          <%_ } else { _%>
            <%_ if (!readOnly) { _%>
            <Button onClick={() => this.setState({ showModalForm: true })}  color="primary" className="btn btn-primary float-right jh-create-entity">
              <FontAwesomeIcon icon="plus" />&nbsp;
              <%_ if(typeof btnNewItem !== 'undefined') { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.btnNewItem"><%= btnNewItem %></Translate>
              <%_ } else { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">Create a new <%= entityClassHumanized %></Translate>
              <%_ } _%>
            </Button> &nbsp;
            <%_ } _%>
          <%_ } _%>

          </div>

      </>
    )
  }




  renderFilter() {
    <%_ if (typeof notListFilterLayout === 'undefined') {  _%>
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel.namePlural %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      <UncontrolledCollapse toggler="#togglerFilter<%= entityReactName %>">
          <CardBody>
            <AvForm ref={(el) => this.myFormRef = el} id="form-filter" onSubmit={this.filterEntity} >
                <div className="row mt-1 ml-3 mr-3">
                  <%_ if (typeof listFilterLayout!== "undefined" && listFilterLayout.length > 0) {  _%>
                    <%_ for (idx in listFilterLayout) { _%>
                      <%_ if(listFilterLayout[idx].type == 'field'){  _%>
                          <%- include('printFields/printFieldsFilters', {field: listFilterLayout[idx].entity}); -%>
                        <%_ } else {  _%>
                          <%- include('printFields/printRelationshipsFilters', {rel: listFilterLayout[idx].entity}); -%>
                      <%_ } _%>
                    <%_ } _%>
                  <%_ } else {  _%>
                    <%_ for (idx in fields) { _%>
                      <%- include('printFields/printFieldsFilters', {field: fields[idx]}); -%>
                   <%_ } _%>
                    <%_ relationships.forEach(rel => { _%>
                      <%- include('printFields/printRelationshipsFilters', {rel: rel}); -%>
                    <%_ }) _%>
                  <%_ } _%>
                </div>

                <div className="row mb-2 mr-4 justify-content-end">
                    <Button color="primary" type="submit">
                      <i className="fa fa-filter" aria-hidden={"true"}></i>&nbsp;
                      <Translate contentKey="<%= i18nKeyPrefix %>.btnFilter">Filter</Translate>
                    </Button>
                    &nbsp;
                    <Button color="secondary" onClick={this.cancelFilters}>
                      <FontAwesomeIcon icon="trash-alt" />&nbsp;
                      <Translate contentKey="<%= i18nKeyPrefix %>.btnCleanFilter">Clean Filter</Translate>                        
                    </Button>
                  </div>
          
              </AvForm>
          </CardBody>
        </UncontrolledCollapse>
      </>
    )
    <%_ } else { _%>
          return ( <> </> )
    <%_ } _%>
  }
  
  

  renderTable() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel.namePlural %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      {
        <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ?(
          <%_ if (typeof addComponenteListTable != "undefined" &&  addComponenteListTable != "false"){ _%>
            <<%= entityReactName %>ListComponent {...this.props} state={state} sortFunction={sortFunction}  />
          <%_ } else {  _%>

                    
<Table id="<%= entityFileName %>-table-list" responsive aria-describedby="<%= entityFileName %>-heading"  className={'table-hover table-striped mt-4 table-responsive-css'}>
  <thead className={"thead-light"}>
    <tr>
      <%_ if (typeof listTableHideId == "undefined" ||  listTableHideId == "false"){ _%>
        <th<% if (pagination !== 'no') { %> className="hand" onClick={sortFunction('id')} <%_ } _%>>
          <Translate contentKey="global.field.id">ID</Translate>
          <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
        </th>
      <%_ } _%>
      <%_ if (listTableLayout.length > 0) {  _%>
        <%_ for (idx in listTableLayout) { _%>
          <%_ if(listTableLayout[idx].type == 'field'){  _%>
            { state.baseFilters !== '<%= listTableLayout[idx].name %>' ?
            <th<% if (pagination !== 'no') { %> className="hand" onClick={sortFunction('<%=listTableLayout[idx].entity.fieldName%>')} <%_ } _%>>
              <Translate contentKey="<%= `${i18nKeyPrefix}.${listTableLayout[idx].entity.fieldName}` %>">
                <%= listTableLayout[idx].entity.fieldNameHumanized %>
              </Translate>
              <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
            </th> : null }
          <%_ } else { _%>
            { state.baseFilters !== '<%= listTableLayout[idx].name %>' ?
            <th<% if (pagination !== 'no') { %> <% } %>>
                <Translate contentKey="<%= `${i18nKeyPrefix}.${listTableLayout[idx].entity.relationshipName}` %>">
                  <%= listTableLayout[idx].entity.relationshipNameHumanized %></Translate>
                  <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
            </th> : null }
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
          <%_ for (idx in fields) { _%>
            { state.baseFilters !== '<%= fields[idx].fieldName %>' ?
            <th<% if (pagination !== 'no') { %> className="hand" onClick={sortFunction('<%=fields[idx].fieldName%>')} <%_ } _%>>
              <Translate contentKey="<%= `${i18nKeyPrefix}.${fields[idx].fieldName}` %>"><%= fields[idx].fieldNameHumanized %></Translate>
              <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
            </th> : null }
          <%_ } _%>
          <%_ for (idx in relationships) { _%>
              <%_ if (relationships[idx].relationshipType === 'many-to-one'
              || (relationships[idx].relationshipType === 'one-to-one')
              || (relationships[idx].relationshipType === 'many-to-many')) {
              const fieldName = dto === 'no' ? "." + relationships[idx].otherEntityField : relationships[idx].otherEntityFieldCapitalized;_%>

              { state.baseFilters !== '<%= relationships[idx].relationshipName %>' ?
              <th<% if (pagination !== 'no') { %> <% } %>>
                  <Translate contentKey="<%= `${i18nKeyPrefix}.${relationships[idx].relationshipName}` %>">
                    <%= relationships[idx].relationshipNameHumanized %></Translate>
                    <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
              </th> : null }
            <%_ } _%>
          <%_ } _%>
      <%_ } _%>
      
      <% if (typeof notlistButtons === "undefined" || notlistButtons == false || notlistButtons == "false") { %>
      <th />
      <%_ } _%>
    </tr>
  </thead>
  <tbody>
    <tr></tr>
    {
      <%= entityInstance %>List.map((<%=entityInstance %>, i) => (
      <tr key={`entity-${i}`}>
        <%_ if (typeof listTableHideId == "undefined" ||  listTableHideId == "false"){ _%>
          <td>
            <b className="visible-xs"><Translate contentKey="global.field.id">ID</Translate></b>
            <Button tag={Link} to={`${match.url}/${<%=entityInstance %>.id}`} color="link" size="sm">
              {<%= entityInstance %>.id}
            </Button>
          </td>
        <%_ } _%>
        <%_ if (listTableLayout.length > 0) {  _%>
          <%_ for (idx in listTableLayout) { _%>
            <%_ if(listTableLayout[idx].type == 'field'){  _%>
              <%- include('printFields/printFieldsTable', {field: listTableLayout[idx].entity}); -%>
            <%_ } else {  _%>
              <%- include('printFields/printRelationshipsTable', {rel: listTableLayout[idx].entity}); -%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%> 
             <%- include('printFields/printFieldsTable', {field: fields[idx]}); -%>  
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%> 
             <%- include('printFields/printRelationshipsTable', {rel: rel}); -%>  
          <%_ }) _%>
        <%_ } _%>


        <% if (typeof notlistButtons === "undefined" || notlistButtons == false || notlistButtons == "false") { %>
       
        <td className="text-right">
          <div className="btn-group flex-btn-group-container">
              <Button onClick={()=>this.openUpdateModal(<%=entityInstance %>)} color="primary" size="sm">
                <FontAwesomeIcon icon="pencil-alt" /> <span className="d-none d-md-inline"></span>
              </Button>
              <Button onClick={()=>this.openDeleteModal(<%=entityInstance %>)} color="danger" size="sm">
                <FontAwesomeIcon icon="trash" /> <span className="d-none d-md-inline"></span>
              </Button> 
              </div>
            </td>
            <%_ } _%>   
          </tr>
      ))
    }
  </tbody>
</Table>
          <%_ } _%>
        ) : (
            !this.props.loading 
            ? <div className="alert alert-warning">
                <Translate contentKey="<%= i18nKeyPrefix %>.home.notFound">
                  No <%= entityClassPluralHumanized %> found
                </Translate>
              </div> 
            : <div />
        )
      }
      </>
    )
  }
  

  renderFooter() {
    const { 
      <% uniqueRealtionFields.forEach(rel => { %> <%= rel.namePlural %>, <% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      <%_ if (databaseType !== 'cassandra') { _%>
        <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
        <div className={ <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ? '' : 'd-none' }>
          <Row className="justify-content-center">
            <JhiItemCount
              page={this.state.activePage}
              total={totalItems}
              itemsPerPage={this.state.itemsPerPage}
              <%{ if (enableTranslation) { %>i18nEnabled<% }}%>
            />
          </Row>
          <Row className="justify-content-center">
            <ReactPaginate
              previousLabel={'<'}
              nextLabel={'>'}
              previousClassName={'page-item'}
              nextClassName={'page-item'}
              breakClassName={'page-item'}
              pageClassName={'page-item'}
              nextLinkClassName={'page-link'}
              previousLinkClassName={'page-link'}
              breakLinkClassName={'page-link'}
              pageLinkClassName={'page-link'}
              pageCount={this.props.totalItems / this.state.itemsPerPage}
              breakLabel={'...'}
              marginPagesDisplayed={2}
              pageRangeDisplayed={5}
              onPageChange={(v) => { if(v.selected >= 0) this.handlePagination(v.selected+1) } }
              containerClassName={'pagination'}
              subContainerClassName={'page-item'}
              activeClassName={'active'}
            />
          </Row>
        </div>
        <% } _%>
      <%_ } _%>
      </>
    )
  }

  

  render() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel.namePlural %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
      let <%= baseFilters %>BaseFilter = null; 
      <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
    <%_ } _%>

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <Panel <%_ if(baseFiltersModal) { %> isOpen <%_ } %>>
        <% if ((typeof hideHeader) === 'undefined') { %>
          <PanelHeader>
            { this.renderHeader() }
          </PanelHeader>
        <% } %>
          <PanelBody>
            <%_ if (searchEngine === 'elasticsearch') { _%>
            <Row>
              <Col sm="12">
                <AvForm onSubmit={this.search}>
                  <div>
                    <InputGroup>
                      <AvInput type="text" name="search" value={this.state.search} onChange={this.handleSearch}
                        placeholder=<% if (enableTranslation) { %>{translate('<%= i18nKeyPrefix %>.home.search')}<% } else { %>"Search"<% } %>/>
                      <Button className="input-group-addon">
                        <FontAwesomeIcon icon="search" />
                      </Button>
                      <Button type="reset" className="input-group-addon" onClick={this.clear}>
                        <FontAwesomeIcon icon="trash" />
                      </Button>
                    </InputGroup>
                  </div>
                </AvForm>
              </Col>
            </Row>
            <%_ } _%>


            <%_ if (typeof addComponenteBeforeListTable != "undefined" &&  addComponenteBeforeListTable != "false"){ _%>
              <<%= entityReactName %>BeforeComponent {...this.props}  />
            <%_ } _%>

              <div className="table-responsive">
                <%_ if (pagination === 'infinite-scroll') { _%>
                <InfiniteScroll pageStart={this.state.activePage}
                                loadMore={this.handleLoadMore}
                                hasMore={this.state.activePage - 1 < this.props.links.next}
                                loader={<div className="loader">Loading ...</div>}
                                threshold={0}
                                initialLoad={false}>
                <%_ } _%>
                <%_ if (typeof notListFilterLayout === 'undefined') { _%>
                  { this.renderFilter() }
                <%_ } _%>

                { this.renderTable() }
                { this.renderNewModal() }
                { this.renderDelete() }
                { this.renderUpdateModal() }
                <%_ if (pagination === 'infinite-scroll') { _%>
                </InfiniteScroll>
                <%_ } _%>
              </div>

            <%_ if (typeof addComponenteAfterListTable != "undefined" && addComponenteAfterListTable != "false"){ _%>
              <<%= entityReactName %>AfterComponent {...this.props}  />
            <%_ } _%>

          </PanelBody>
          <PanelFooter>
            { this.renderFooter() }
          </PanelFooter>
        </Panel>
    );
  }
}

export const mapStateToProps = ({ <%= entityInstance %>, ...storeState  }: IRootState) => ({
  <%_ if (Object.keys(importEntities).length > 0){_%>
    <%_ for(const importEntity in importEntities) { _%>
      <%_ if (importEntities[importEntity] == 'Entity'){ _%>
        entity<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entity,
      <%_ } else if (importEntities[importEntity] == 'List') { _%>
        entities<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entities,
      <%_ } else { _%>
        entities<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entities,
        entity<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entity,
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
  <%_ }) _%>
  <%= entityInstance %>List: <%= entityInstance %>.entities,
  <%_ if (pagination !== 'no') { _%>
  totalItems: <%= entityInstance %>.totalItems,
  <%_ } _%>
  loading: <%= entityInstance %>.loading,
  <%_ if (pagination === 'infinite-scroll') { _%>
  accountInfo: storeState.accountInfo.links,
  links: <%= entityInstance %>.links,
  entity: <%= entityInstance %>.entity,
  updateSuccess: <%= entityInstance %>.updateSuccess,
  <%_ } _%>


  // UPDATE
    <%= entityInstance %>Entity: <%= entityInstance %>.entity

});

export const  mapDispatchToProps = {
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.action %>,
  <%_ }) _%>
 <%_ if (searchEngine === 'elasticsearch') { _%>
 getSearchEntities,
 <%_ } _%>
 getEntities,

<%_ if (Object.keys(importEntities).length > 0){ _%>
  <%_ for(const importEntity in importEntities) { _%>
    <%_ if (importEntities[importEntity] == 'Entity'){ _%>
      getEntity<%= importEntity %>,
      update<%= importEntity %>,
    <%_ } else if (importEntities[importEntity] == 'List') { _%>
      getEntities<%= importEntity %>,
      update<%= importEntity %>,
    <%_ } else { _%>
      getEntities<%= importEntity %>,
      getEntity<%= importEntity %>,
      update<%= importEntity %>,
    <%_ } _%>
  <%_ } _%>
<%_ } _%>

 updateEntity,
 reset,

  // UPDATE
  getEntity,
  <%_ if (fieldsContainBlob) { _%>
  setBlob,
  <%_ } _%>
  createEntity,

  // DELETE
  deleteEntity,

};

      export type StateProps = ReturnType<typeof mapStateToProps>;
      export type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>);
