import React from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, <% if (haveFieldWithJavadoc) { %>UncontrolledTooltip, <% } %>Row, Col } from 'reactstrap';
<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
  <%_ baseFiltersModal = true; _%>
  import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody, ModalFooter as PanelFooter } from 'reactstrap';
<%_ } else { _%> 
  import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 
import {
  Translate,
  ICrudGetAction,
  <%_ if (fieldsContainBlob) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  <%_ } _%>
  TextFormat
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { IRootState } from 'app/shared/reducers';
import { getEntity, I<%= entityReactName %>BaseState, get<%= entityReactName %>State, getEntityFiltersURL } from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';



<%_ if (viewLayout.length > 0) {  _%>
  <%_ for (idx in viewLayout) {  _%>
    <%_  if(viewLayout[idx].type != 'field' && viewLayout[idx].entity['viewLayoutEmbebed'] === "true"){ _%>
    <%_ const embebedEntity = viewLayout[idx].entity; _%>
      import { <%= embebedEntity.relationshipNameCapitalized %>Detail } from '../<%= embebedEntity.otherEntityPath %>/<%= embebedEntity.otherEntityPath %>-detail';
      import { getEntity as getEntity<%= embebedEntity.otherEntityNameCapitalized %> } from '../<%= embebedEntity.otherEntityPath %>/<%= embebedEntity.otherEntityPath %>.reducer';
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
  


<%_ if (viewTabs.length > 0) { _%>
  import { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';
  import classnames from 'classnames';
<%_ } _%>
  


<%_ if (typeof generator['extendView'] != "undefined" &&  generator['extendView'] != "false"){ %>
  import { StatePropsExtended, DispatchPropsExtended } from './extended/<%= entityFileName %>-detail';
<%_ } _%>


export interface I<%= entityReactName %>State {
  fieldsBase: I<%= entityReactName %>BaseState;
  <%_ if (viewTabs.length > 0) { _%>activeTab: number;<%_ } _%>
}


<%_ if (typeof generator['extendView'] != "undefined" &&  generator['extendView'] != "false"){ %>
  export interface I<%= entityReactName %>DetailProps extends StateProps, DispatchProps, StatePropsExtended, DispatchPropsExtended, RouteComponentProps<{id: string}>  {
  }
<%_ } else { _%>
  export interface I<%= entityReactName %>DetailProps extends StateProps, DispatchProps, RouteComponentProps<{id: string}>  {
  }
<%_ } _%>




export class <%= entityReactName %>Detail extends React.Component<I<%= entityReactName %>DetailProps, I<%= entityReactName %>State> {

  constructor(props: Readonly<I<%= entityReactName %>DetailProps>) {
    super(props);
    this.state = {
      ...this.state,
      <%_ if (viewTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
      fieldsBase: {
        ...get<%= entityReactName %>State(this.props.location),
        <%_ if (typeof baseFilters !== 'undefined' && baseFilters) { _%>
          <%= baseFilters _%>Id: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'],
          baseFilters: '<%= baseFilters _%>',
        <%_ } _%>  
      },
    };
  }

  <%_ if (viewTabs.length > 0) { _%>
    toggleTab(tab: number) {
      if (this.state.activeTab !== tab) {
        this.setState({
          activeTab: tab
        });
      }
    }
  <%_ } _%>

  getFiltersURL = (offset = null) => {
    const fieldsBase = this.state.fieldsBase;
    let url = '_back=1' + (offset !== null ? '&offset=' + offset : '');
    Object.keys(fieldsBase).map((key)=>{
      url += '&'+key+'=' + fieldsBase[key];
    }); 
    return url;
  };

  componentDidMount() {
    this.props.getEntity(this.props.match.params['id']);
  }

  renderHeader() {
    const {<%= entityInstance %>Entity } = this.props;
    const state = this.state;
    return (
      <>
      <div id="page-heading">
        <span className="page-header ml-3"><%= entityClassPluralHumanized %></span>
        <%_ for (idx in viewButtons) { _%>
          <%_ const attrib = viewButtons[idx].attributes; _%>
            <Button className="float-right jh-create-entity" tag={<%=attrib['tag'] %>} to={<%=attrib['to'] %>} color="<%=attrib['color'] %>" size="<%=attrib['size'] %>">
              <FontAwesomeIcon icon="<%=attrib['icon'] %>" /> <span className="d-none d-md-inline">
                <Translate contentKey="<%= i18nKeyPrefix %>.viewButtons.<%=viewButtons[idx].name %>"><%=attrib['text'] %></Translate></span>
            </Button>
        <%_ } _%>
      </div>
      <ol className="breadcrumb">
        <li className="breadcrumb-item"><Link to="/">Inicio</Link></li>
        <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>"}><%= _.startCase((baseFilters+"s")) %></Link></li>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters _%>Id}>{
            <%if (typeof baseFiltersAttributes !== 'undefined' && typeof baseFiltersAttributes['showField']!== 'undefined') { %>
              <%= entityInstance %>Entity.<%= baseFilters %> ? <%= entityInstance %>Entity.<%= baseFilters %>.<%= baseFiltersAttributes['showField'] %> : this.state.fieldsBase.<%= baseFilters _%>Id
            <% } else {%>
              this.state.fieldsBase.<%= baseFilters _%>Id
            <% }%>
          }</Link></li> 
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters _%>Id + "/<%= entityFileName %>"}><%= entityClassPluralHumanized %></Link></li>
        <%_ } else { _%>
          <li className="breadcrumb-item active"><Link to={"/<%= entityFileName %>"}><%= entityClassPluralHumanized %></Link></li>
        <%_ } _%>
        <li className="breadcrumb-item active"><%= entityClassPluralHumanized %> details</li>
      </ol>
      </>
    )
  }

  renderBody() {
    const {<%= entityInstance %>Entity } = this.props;
    const state = this.state;
    return (
      <>
        <Row className="justify-content-center">
            <Col md="11">
              <h2>
                <Translate contentKey="<%= i18nKeyPrefix %>.detail.title"><%= entityClass %></Translate> 
                <%_ if (toStringFields.length > 0) { _%>
                  <small>
                    <%_ for (idx in toStringFields) { _%>
                      <%_ if(toStringFields[idx].type == 'field'){ _%>
                        &nbsp; {<%= entityInstance %>Entity['<%= toStringFields[idx].entity.fieldName %>']}
                        <%_  } else { _%>
                        &nbsp; {<%= entityInstance %>Entity['<%= toStringFields[idx].entity.relationshipName %>']} 
                        <%_ } _%>
                    <%_ } _%>
                  </small>
                <%_ } else { _%>
                  [<b>{<%= entityInstance %>Entity.id}</b>]
                <%_ } _%>

              </h2>

                <Row className="jh-entity-details">
                  <%_ if (viewTabs.length === 0) { _%>
                    <%_ if (viewLayout.length > 0) {  _%>
                      <%_ for (idx in viewLayout) {  _%>
                          <%_  if(viewLayout[idx].type == 'field'){ _%>
                            <%- include('printFields/printFieldsDetails', {field: viewLayout[idx].entity}); -%>
                          <%_  } else { _%>
                            <%_  if(typeof baseFilters === 'undefined' || baseFilters !== viewLayout[idx].name) { _%>
                              <%- include('printFields/printRelationshipsDetails', {rel: viewLayout[idx].entity}); -%>
                            <%_  } _%>
                          <%_  } _%>
                      <%_  } _%>
                  <%_ } else { _%>
                      <%_ for (idx in fields) {  _%>
                        <%- include('printFields/printFieldsDetails', {field: fields[idx]}); -%>
                          <%_ } _%>
                      <%_ for (idx in relationships) {  _%>
                        <%_  if(typeof baseFilters === 'undefined' || baseFilters != relationships[idx].relationshipFieldName) { _%>
                            <%- include('printFields/printRelationshipsDetails', {rel: relationships[idx]}); -%>
                        <%_ } _%>
                      <%_ } _%>
                  <%_ } _%>
                  <%_ } else { _%>
                      <Nav tabs>
                      <%_ for (idx in viewTabs) { _%>
                        <NavItem>
                          <NavLink
                            className={classnames({ active: this.state.activeTab === <%= idx %> })}
                            onClick={() => { this.toggleTab(<%= idx %>); }}
                          >
                            <span className="d-sm-none">
                              <Translate contentKey="<%= i18nKeyPrefix %>.viewTabs.<%= viewTabs[idx] %>">
                                <%= viewTabs[idx] %>
                              </Translate> 
                            </span>
                            <span className="d-sm-block d-none">
                              <Translate contentKey="<%= i18nKeyPrefix %>.viewTabs.<%= viewTabs[idx] %>">
                                <%= viewTabs[idx] %>
                              </Translate> 
                            </span>
                          </NavLink>
                        </NavItem>
                      <%_ } _%>
                      <%_ if(defaultViewTab) { _%>
                          <NavItem>
                            <NavLink
                              className={classnames({ active: this.state.activeTab === <%= viewTabs.length %> })}
                              onClick={() => { this.toggleTab(<%= viewTabs.length %>); }}
                            >
                              <span className="d-sm-none">Default</span>
                              <span className="d-sm-block d-none">Default</span>
                            </NavLink>
                          </NavItem>
                      <%_ } _%>
                    </Nav> 
                    <TabContent activeTab={this.state.activeTab}>
                      <%_ for (iTabs in viewTabs) { _%>
                        <TabPane tabId={<%= iTabs %>}>
                          <%_ if (viewLayout.length > 0) {  _%>
                            <%_ for (idx in viewLayout) {  _%>
                              <%_  if(viewTabs[iTabs] === viewLayout[idx].entity['viewTab']) {  _%>
                                <%_  if(viewLayout[idx].type == 'field'){ _%>
                                <%- include('printFields/printFieldsDetails', {field: viewLayout[idx].entity}); -%>
                                <%_  } else { _%>
                                  <%_  if(typeof baseFilters === 'undefined' || baseFilters != viewLayout[idx].name) { _%>
                                    <%- include('printFields/printRelationshipsDetails', {rel: viewLayout[idx].entity}); -%>
                                  <%_  } _%>
                                <%_  } _%>
                              <%_  }  _%>
                            <%_  } _%>
                      <%_ } else { _%>
                            <%_ for (idx in fields) {  %>
                                  <%_  if(viewTabs[iTabs] === fields[idx]['viewTab']) {  %>
                                  <%- include('printFields/printFieldsDetails', {field: fields[idx]}); -%>
                                  <%_  }  %>
                                <%_  } _%>
                                <%_ for (idx in relationships) { %>
                                  <%_  if(typeof baseFilters === 'undefined' || baseFilters != relationships[idx].relationshipFieldName) { _%>
                                    <%_  if(viewTabs[iTabs] === relationships[idx]['viewTab']) {  %>
                                      <%- include('printFields/printRelationshipsDetails', {rel: relationships[idx]}); -%>
                                    <%_  } %>
                                  <%_  } %>
                              <%_  } _%>
                      <%_ } _%>
                        </TabPane>
                      <%_ } _%>
                        <%_ if(defaultViewTab) { _%>
                          <TabPane tabId={<%= viewTabs.length %>}>
                            <%_ if (viewLayout.length > 0) {  _%>
                              <%_ for (idx in viewLayout) {  _%>
                                <%_  if(!viewLayout[idx].entity['viewTab'] || viewLayout[idx].entity['viewTab'] === "default") {  _%>
                                  <%_  if(viewLayout[idx].type == 'field'){ _%>
                                  <%- include('printFields/printFieldsDetails', {field: viewLayout[idx].entity}); -%>
                                  <%_  } else { _%>
                                  <%_  if(typeof baseFilters === 'undefined' || baseFilters != viewLayout[idx].name) { _%>
                                    <%- include('printFields/printRelationshipsDetails', {rel: viewLayout[idx].entity}); -%>
                                  <%_  } _%>
                                  <%_  } _%>
                                <%_  }  _%>
                              <%_  } _%>
                      <%_ } else { _%>
                              <%_ for (idx in fields) {  _%>
                                <%_  if(!fields[idx]['viewTab'] || fields[idx]['viewTab'] === "default") {  _%>
                                <%- include('printFields/printFieldsDetails', {field: fields[idx]}); -%>
                                <%_  }  _%>
                              <%_  } _%>
                              <%_ for (idx in relationships) { _%>
                                <%_  if(typeof baseFilters === 'undefined' || baseFilters != relationships[idx].relationshipFieldName) { _%>
                                  <%_  if(!relationships[idx]['viewTab'] || relationships[idx]['viewTab'] === "default") {  _%>
                                    <%- include('printFields/printRelationshipsDetails', {rel: relationships[idx]}); -%>
                                  <%_  } _%>
                                <%_  } _%>
                              <%_  } _%>
                      <%_ } _%>
                          </TabPane>
                      <%_ } _%>
                      
                    </TabContent>
                  <%_ } _%>
                  </Row>

                  <div className="footer-details-buttons"> 
                    <Button tag={Link} to={<%_ if (typeof baseFilters !== 'undefined' && baseFilters) { 
                      _%> "/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters %>Id + <%_ 
                    } %>"/<%= entityFileName %>?"+this.getFiltersURL()} replace color="info">
                      <FontAwesomeIcon icon="arrow-left" /> <span className="d-none d-md-inline" ><Translate contentKey="<%= i18nKeyPrefix %>.btnBack">Back</Translate></span>
                    </Button>&nbsp;
                    <%_ if (!readOnly) { _%>
                    <Button tag={Link} to={`<%_ if (typeof baseFilters !== 'undefined' && baseFilters) { 
                      _%> /<%= baseFilters %>/${this.state.fieldsBase.<%= baseFilters %>Id }<%_ 
                    } %>/<%= entityFileName %>/${<%=entityInstance %>Entity.id}/edit?+${this.getFiltersURL()}`} replace color="primary">
                      <FontAwesomeIcon icon="pencil-alt" /> <span className="d-none d-md-inline"><Translate contentKey="<%= i18nKeyPrefix %>.btnEdit">Edit</Translate></span>
                    </Button>
                  </div>
              <%_ } _%>
            </Col>
        </Row>
      </>
    )
  }

  render() {
    const {<%= entityInstance %>Entity } = this.props;
    const state = this.state;
    return (
      <div>
      <Panel <%_ if(baseFiltersModal) { %> isOpen <%_ } %>>
        <PanelHeader>
          { this.renderHeader() }
        </PanelHeader>
        <PanelBody>
          { this.renderBody() }
        </PanelBody>
          </Panel>
        </div>
      );
  }
}

export const mapStateToProps = ({ <%= entityInstance %>, ...storeState }: IRootState) => ({
  <%= entityInstance %>Entity: <%= entityInstance %>.entity,
  <%_ if (viewLayout.length > 0) {  _%>
    <%_ for (idx in viewLayout) {  _%>
      <%_  if(viewLayout[idx].type != 'field' && viewLayout[idx].entity['viewLayoutEmbebed'] === "true"){ _%>
        <%= viewLayout[idx].entity.otherEntityName %>Entity: storeState.<%= viewLayout[idx].entity.otherEntityName %>.entity,
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
});

export const mapDispatchToProps = { 
  getEntity,
  <%_ if (viewLayout.length > 0) {  _%>
    <%_ for (idx in viewLayout) {  _%>
      <%_ if(viewLayout[idx].type != 'field' && viewLayout[idx].entity['viewLayoutEmbebed'] === "true"){ _%>
         getEntity<%= viewLayout[idx].entity.otherEntityNameCapitalized %>,
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>  
};

      export type StateProps = ReturnType<typeof mapStateToProps>;
      export type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>Detail);
