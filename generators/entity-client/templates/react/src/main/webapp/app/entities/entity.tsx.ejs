/* eslint complexity: ["error", 300] */
import React from 'react';
import axios from 'axios';
<%_ if (pagination === 'infinite-scroll')Â { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { convertDateFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
import { getFilterFromSelect, getFormFromSelect, getListAxios, getValueRecursive , showFieldsSelectAsync } from 'app/shared/util/entity-utils';
import { connect } from 'react-redux';
import Select from 'react-select';
import SelectAsync from 'react-select/async';
import { Link, RouteComponentProps } from 'react-router-dom';
import InputMask from "react-input-mask";
import { Button, <% if (searchEngine === 'elasticsearch') { %>InputGroup, <% } %>Col, Row, Table, Label, UncontrolledTooltip, 
<%_ if (typeof notListFilterLayout === 'undefined') {  _%>
  UncontrolledCollapse,
<%_ } _%> CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter,
<%_  if (listButtonsInDropdown === true) { _%> Dropdown, DropdownToggle,  DropdownMenu,  DropdownItem, <%_ } _%> UncontrolledAlert } from 'reactstrap';
import { AvForm, div, AvInput, AvField } from 'availity-reactstrap-validation';
import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  <%_ } _%>
  <% if (searchEngine === 'elasticsearch') { %> ICrudSearchAction, <% } %>
  ICrudGetAllAction, TextFormat
  <%_ if (pagination !== 'no') { _%>
  , getSortState, IPaginationBaseState
  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
  , JhiItemCount
  <%_ }} _%>
} from 'react-jhipster';
import { Translate, translate } from 'app/config/translate-component';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import ReactPaginate from 'react-paginate';

<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
  <%_ baseFiltersModal = true; _%>
  import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody, ModalFooter as PanelFooter } from 'reactstrap';
<%_ } else { _%> 
  import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 



<%_ if (typeof addComponenteBeforeListTable != "undefined" &&  addComponenteBeforeListTable != "false"){ _%>
  import <%= entityReactName %>BeforeComponent from './components/<%= entityFileName %>-before-component';
<%_ } _%>
<%_ if (typeof addComponenteListTable != "undefined" &&  addComponenteListTable != "false"){ _%>
  import <%= entityReactName %>ListComponent from './components/<%= entityFileName %>-list-component';
<%_ } _%>
<%_ if (typeof addComponenteAfterListTable != "undefined" &&  addComponenteAfterListTable != "false"){ _%>
  import <%= entityReactName %>AfterComponent from './components/<%= entityFileName %>-after-component';
<%_ } _%>

<%_ let importEntities = {} _%>  
<%_ if (typeof getEntityListTable != "undefined" &&  getEntityListTable != ""){ _%>
  <%_ const getEntityListTableSplit = getEntityListTable.split(",") _%>  
  <%_ for(const importEntity in getEntityListTableSplit) { _%>
    <%_ const importEntitySplit = getEntityListTableSplit[importEntity].split("-") _%>  
    <%_ if(importEntitySplit.length === 1){ _%>
      <%_ importEntities[importEntitySplit[0]] = 'Entity' _%>
    <%_ } else if(importEntitySplit.length === 2){ _%>
      <%_ importEntities[importEntitySplit[1]] = importEntitySplit[0].trim(" ") _%>
    <%_ } _%>
  <%_ } _%>
<%_ } _%>

<%_ if (Object.keys(importEntities).length > 0){ _%>
  <%_ for(const importEntity in importEntities) { _%>
    <%_ const importEntityPathName = (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)).replace(/(?:^|\.?)([A-Z])/g, function (x,y){return "-" + y.toLowerCase()}).replace(/^_/, ""); _%>
    <%_ if (importEntities[importEntity] == 'Entity'){ _%>
      import {getEntity as getEntity<%= importEntity %>, updateEntity as update<%= importEntity %>} from '../<%= importEntityPathName %>/<%= importEntityPathName %>.reducer';
    <%_ } else if (importEntities[importEntity] == 'List') { _%>
      import {updateEntity as update<%= importEntity %>} from '../<%= importEntityPathName %>/<%= importEntityPathName %>.reducer';
    <%_ } else { _%>
      import {getEntity as getEntity<%= importEntity %>, updateEntity as update<%= importEntity %>} from '../<%= importEntityPathName %>/<%= importEntityPathName %>.reducer';
    <%_ } _%>
  <%_ } _%>
<%_ } _%>


<%_ for (idx in componentList) {  _%>
  import <%= componentList[idx].name %> from './components/<%= componentList[idx].name %>';
<%_ } _%>

import { IRootState } from 'app/shared/reducers';
import {
  updateEntity,
  deleteEntity,
  getUrlBack,
  get<%= entityReactName %>State, I<%= entityReactName %>BaseState, getEntityFiltersURL,
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntities,
  reset
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
 import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (pagination !== 'no') { _%>
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';
<%_ } _%>





<%_
let hasRelationshipQuery = false;
let hasOneToOneNotOwner = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if(rel.relationshipType ==="one-to-one" && rel.ownerSide  === false && typeof baseFilters !== 'undefined' && baseFilters === rel.relationshipName  ){
        hasOneToOneNotOwner = true;
      }
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key]) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
  <%_ } _%>
<%_ }
  }
}); _%>

<%_ if (typeof generator['extendList'] != "undefined" &&  generator['extendList'] != "false"){ %>
  import { StatePropsExtended, DispatchPropsExtended, IExtendedState, IExtendedProps } from './extended/<%= entityFileName %>';
<%_ } _%>

import DatePicker, { registerLocale } from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { pt } from 'date-fns/esm/locale';
import moment from 'moment';

import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';

registerLocale('pt', pt);
const MySwal = withReactContent(Swal);


<%_ if (typeof generator['extendList'] != "undefined" &&  generator['extendList'] != "false"){ %>
  export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, StatePropsExtended, DispatchPropsExtended, IExtendedProps, RouteComponentProps<{url: string}> {}
  export interface I<%= entityReactName %>StateAux extends I<%= entityReactName %>BaseState, IExtendedState {}
<%_ } else { _%>
  export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, RouteComponentProps<{url: string}> {}
  export interface I<%= entityReactName %>StateAux extends I<%= entityReactName %>BaseState {}
<%_ } _%>


<% if (searchEngine === 'elasticsearch' && pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>StateAux, IPaginationBaseState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (searchEngine === 'elasticsearch') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>StateAux {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>StateAux, IPaginationBaseState {
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
};
<%_ }  _%>

export class <%= entityReactName %> extends React.Component<I<%= entityReactName %>Props<% if (searchEngine === 'elasticsearch' || pagination !== 'no') { %>, I<%= entityReactName %>State<% } %>> {
  protected myFormRef: any;

  constructor(props: I<%= entityReactName %>Props) {
    super(props);
    <%_ if (searchEngine === 'elasticsearch' || pagination !== 'no') { _%>
      this.state = {
        listCheckedModalSuperSelectID: [],
        listCheckedModalSuperSelectFilters: {},
        modalSuperSelect: '',
        listCheckedID: [],
        isCheckedAll: false,
        <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}, <%_ } _%>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        search: '',
        <%_ } _%>
        <%_ if (pagination !== 'no') { _%>
        ...getSortState(this.props.location, ITEMS_PER_PAGE),
        urlBack: getUrlBack(this.props.location),
        ...get<%= entityReactName %>State(this.props.location)
        <%_ if (typeof baseFilters !== 'undefined' && baseFilters) { _%>
          , <%= baseFilters _%>Id:  [{ value: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'], label: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'] } ]
          , baseFilters: '<%= baseFilters _%>' 
        <%_ } _%>
        <%_ } _%>
      };
      <%_ } _%>
  }


  <%_  if (listButtonsInDropdown === true) { _%>
    toggle = (btn) => {
      const dropdownButtons = this.state.dropdownButtons;
      dropdownButtons[btn] = !dropdownButtons[btn];
      this.setState({dropdownButtons})
    }
  <%_ } _%>


  handleInputModalSuperSelectChange(selected, multiple) {
    let listCheckedModalSuperSelectID: any = multiple ? this.state.listCheckedModalSuperSelectID : [];
    if (listCheckedModalSuperSelectID.map(v => v['value'] + '').includes(selected.value + '')) {
      listCheckedModalSuperSelectID = listCheckedModalSuperSelectID.filter(v => v['value'] + '' !== selected.value + '');
    } else {
      listCheckedModalSuperSelectID.push(selected);
    }
    this.setState({ listCheckedModalSuperSelectID: multiple ? listCheckedModalSuperSelectID : listCheckedModalSuperSelectID[0] });
  }

  handleInputAllModalSuperSelectThisItens(evt, listChecked, label) {
    if (evt.target.checked) {
      this.setState({ listCheckedModalSuperSelectID: listChecked.data.map(v => ({...v, value: v.id, label: v[label] })) });
    } else {
      this.setState({ listCheckedModalSuperSelectID: [] });
    }
  }
   
  renderModalSuperSelect(entity, listEntity, template, stateField, multiple, showFields?, order?, filtersBase={}) {
    return (
      <>
        <Button
          color="secondary"
          className="super-select-button"
          onClick={async () => {
            if (this.state[stateField]) {
              this.setState({
                listCheckedModalSuperSelectID: this.state[stateField],
                listCheckedModalSuperSelectFilters: {},
                modalSuperSelect: entity,
                listCheckedModalSuperEntities: await getListAxios(listEntity, filtersBase, 0, 100, order ? order : 'id,asc'),
              });
            } else {
              this.setState({
                listCheckedModalSuperSelectFilters: {},
                modalSuperSelect: entity,
                listCheckedModalSuperEntities: await getListAxios(listEntity, filtersBase, 0, 100, order ? order : 'id,asc'),
              });
            }
          }}
        >
          <FontAwesomeIcon icon="filter" />
          &nbsp;
        </Button>
        {this.state.modalSuperSelect === entity ? (
          <Modal
            size="xl"
            isOpen={true}
            toggle={() =>
              this.setState({ listCheckedModalSuperSelectID: [], listCheckedModalSuperSelectFilters: {}, modalSuperSelect: '' })
            }
          >
            <ModalHeader
              toggle={() =>
                this.setState({ listCheckedModalSuperSelectID: [], listCheckedModalSuperSelectFilters: {}, modalSuperSelect: '' })
              }
            >
              <Translate contentKey={'generadorApp.' + entity + '-modal-super-select-title'}> Select Entity</Translate>
            </ModalHeader>
            <ModalBody>
              <div style={{ height: '500px', overflow: 'auto' }}>
                <Table id={'filter-table-list-' + entity} responsive className={'table-hover table-striped mt-4 table-responsive-css'}>
                  <thead>
                    <tr>
                      <th className={'align-middle text-center'} style={{ width: '4%' }}>
                        <input
                          type={multiple ? 'checkbox' : 'hidden'}
                          onChange={evt =>
                            this.handleInputAllModalSuperSelectThisItens(evt, this.state.listCheckedModalSuperEntities, showFields)
                          }
                        />
                      </th>
                      {Object.keys(template).map((v, i) => (
                        <th key={'list-' + entity + '-' + i}>
                          <AvField
                            name={'list-' + entity + '-' + i}
                            type="text"
                            style={v === 'id' ? { width: '60px' } : {}}
                            onChange={async evt => {
                              const listCheckedModalSuperSelectFilters = this.state.listCheckedModalSuperSelectFilters;
                              listCheckedModalSuperSelectFilters[i] = evt.target.value;

                              const _filters = {...filtersBase};
                              Object.keys(listCheckedModalSuperSelectFilters).map((v2, k) => {
                                if (listCheckedModalSuperSelectFilters[v2])
                                  _filters[template[v2] + '.contains'] = listCheckedModalSuperSelectFilters[v2];
                              });

                              this.setState({
                                listCheckedModalSuperSelectFilters,
                                listCheckedModalSuperEntities: await getListAxios(listEntity, _filters, 0, 100, order ? order : 'id,asc'),
                              });
                            }}
                            value={this.state.listCheckedModalSuperSelectFilters[i] ? this.state.listCheckedModalSuperSelectFilters[i] : ''}
                            placeholder={translate(
                              template[v] === 'id' ? 'generadorApp.' + entity + '.field_id' : 'generadorApp.' + entity + '.' + template[v]
                            )}
                          />
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {this.state.listCheckedModalSuperEntities &&
                      this.state.listCheckedModalSuperEntities.data.map((ent, i) => (
                        <tr key={i}>
                          <td className={'align-middle text-center'}>
                            <input
                              type={multiple ? 'checkbox' : 'radio'}
                              checked={
                                multiple
                                  ? this.state.listCheckedModalSuperSelectID.map(v => v['value'] + '').includes(ent['id'] + '')
                                  : this.state.listCheckedModalSuperSelectID['value'] + '' === ent['id'] + ''
                              }
                              onChange={() =>
                                this.handleInputModalSuperSelectChange(
                                  {
                                    ...ent,
                                    value: ent['id'],
                                    label: showFields
                                      .map(field => getValueRecursive(ent, field.split('.')))
                                      .filter(field => field)
                                      .join(' | '),
                                  },
                                  multiple
                                )
                              }
                            />
                          </td>
                          {template &&
                            template.map((field, j) => {
                              if (!field.includes('.')) {
                                return <td key={'list-' + entity + '-' + field}>{ent[field]}</td>;
                              } else {
                                let valAux = ent;
                                field.split('.').map(subField => {
                                  if (Array.isArray(valAux)) {
                                    valAux = valAux
                                      .map(arrField => (arrField[subField] ? arrField[subField] : false))
                                      .filter(filt => filt !== false)
                                      .join(' | ');
                                  } else {
                                    valAux = valAux[subField] ? valAux[subField] : '';
                                  }
                                });
                                return <td key={'list-' + entity + '-' + field}>{valAux}</td>;
                              }
                            })}
                        </tr>
                      ))}
                  </tbody>
                </Table>
              </div>
            </ModalBody>
            <ModalFooter>
              <Button
                color="secondary"
                onClick={() =>
                  this.setState({ listCheckedModalSuperSelectID: [], listCheckedModalSuperSelectFilters: {}, modalSuperSelect: '' })
                }
              >
                <FontAwesomeIcon icon="ban" />
                &nbsp;
                <Translate contentKey={'generadorApp.' + entity + '.btnCancel'}>Cancel</Translate>
              </Button>
              <Button
                id={'jhi-confirm-delete-' + entity}
                color="primary"
                onClick={() => {
                  const newState = {
                    listCheckedModalSuperSelectID: [],
                    listCheckedModalSuperSelectFilters: {},
                    modalSuperSelect: '',
                  };
                  newState[stateField] = this.state.listCheckedModalSuperSelectID;
                  this.setState(newState);
                }}
              >
                <FontAwesomeIcon icon="filter" />
                &nbsp;
                <Translate contentKey={'generadorApp.' + entity + '.btnFilter'}>Filter</Translate>
              </Button>
            </ModalFooter>
          </Modal>
        ) : (
          <> </>
        )}
      </>
    );
  }


  handleInputChange(id) {
    const listCheckedID = this.state.listCheckedID;
    if(listCheckedID.includes(id)){
      this.removeAllArrayItem(listCheckedID, id);
      this.setState({ isCheckedAll: false });
    } else {
      listCheckedID.push(id);
    }
    this.setState({ listCheckedID });
  }

  handleInputAllChange() {
    this.setState({ isCheckedAll: !this.state.isCheckedAll });
    this.setState({ listCheckedID: this.props.<%=entityInstance %>List.map((<%=entityInstance %>) => <%=entityInstance %>.id) });
  }
  handleInputAllThisItens() {
    if(this.state.listCheckedID.length === this.state.itemsPerPage || this.state.listCheckedID.length === this.props.totalItems){
      this.setState({ listCheckedID: [] });
      this.setState({ isCheckedAll: false });
    } else {
      this.setState({ listCheckedID: this.props.<%=entityInstance %>List.map((<%=entityInstance %>) => <%=entityInstance %>.id) });
    }
  }

  removeAllArrayItem(arr, value) {
    let i = 0;
    while (i < arr.length) {
      if (arr[i] === value) {
        arr.splice(i, 1);
      } else {
        ++i;
      }
    }
    return arr;
  }
  removeEntitySelected() {
    if (!this.state.isCheckedAll) {
      // this.saveEntityFild(this.state.listCheckedID, interesse, formSemInteresse);
    } else {
      // const {estado, activePage, itemsPerPage, sort, order, activeTab, comarca, advogados, pesquisa, numeroProcesso, assunto, distribuicaoInicial, distribuicaoFinal, valorInicial, valorFinal, moeda, cnpj, valorAtualizadoInicial, valorAtualizadoFinal, vara, movimentacao, incluirMovimentacoesAll, movimentacaoInicial, movimentacaoFinal} = this.state;
      // this.props.updateInteresseAllEntity(estado, activePage - 1, itemsPerPage, `${sort},${order}`, activeTab, comarca, numeroProcesso, advogados,  pesquisa, assunto, distribuicaoInicial, distribuicaoFinal, valorInicial, valorFinal, moeda, cnpj, valorAtualizadoInicial, valorAtualizadoFinal, vara, movimentacao, incluirMovimentacoesAll, movimentacaoInicial, movimentacaoFinal, interesse, formSemInteresse);
    }
    this.setState({ listCheckedID: [] });
  }

  saveEntityMany = () => {
    if (!this.state.isCheckedAll) {
      // this.saveEntityFild(this.state.listCheckedID, interesse, formSemInteresse);
    } else {
      // const {estado, activePage, itemsPerPage, sort, order, activeTab, comarca, advogados, pesquisa, numeroProcesso, assunto, distribuicaoInicial, distribuicaoFinal, valorInicial, valorFinal, moeda, cnpj, valorAtualizadoInicial, valorAtualizadoFinal, vara, movimentacao, incluirMovimentacoesAll, movimentacaoInicial, movimentacaoFinal} = this.state;
      // this.props.updateInteresseAllEntity(estado, activePage - 1, itemsPerPage, `${sort},${order}`, activeTab, comarca, numeroProcesso, advogados,  pesquisa, assunto, distribuicaoInicial, distribuicaoFinal, valorInicial, valorFinal, moeda, cnpj, valorAtualizadoInicial, valorAtualizadoFinal, vara, movimentacao, incluirMovimentacoesAll, movimentacaoInicial, movimentacaoFinal, interesse, formSemInteresse);
    }
    this.setState({ listCheckedID: [] });
  };


  componentDidMount() {
    <%_ if (pagination !== 'no') { _%>
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.reset();
      <%_ } else { _%>
      this.getEntities();
      <%_ } _%>
    <%_ } else { _%>
    this.props.getEntities();
    <%_ } _%>
  }

  deleteEntity(<%= entityInstance %>Entity) {
    MySwal.fire({
      title: <Translate contentKey="entity.delete.title">Confirm delete operation</Translate>,
      html: <Translate contentKey="<%= i18nKeyPrefix %>.delete.question" interpolate={{ id: <%= entityInstance %>Entity.id }}>Are you sure you want to delete this <%= entityClass %>?</Translate>,
      icon: 'warning',
      showConfirmButton: true,
      showCancelButton: true,
      confirmButtonColor: '#e70015',
      cancelButtonText: <> <FontAwesomeIcon icon="ban" />&nbsp; <Translate contentKey="<%= i18nKeyPrefix %>.btnCancel">Cancel</Translate></>,
      confirmButtonText: <>  <FontAwesomeIcon icon="trash" />&nbsp;<Translate contentKey="<%= i18nKeyPrefix %>.btnDelete">Delete</Translate></>,
    }).then(async response => {
      if (response.isConfirmed) {
        await this.props.deleteEntity(<%= entityInstance %>Entity.id, {reloadList: false});
        this.getEntities();
        MySwal.fire({
          title: <Translate contentKey="entity.delete.title.confirmed">Confirmed delete operation</Translate>,
          icon: 'success'
        })
      }
    });
  }
  

  cancelFilters = () => {
    this.setState(
      {
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
                <%= listFilterLayout[idx].entity.relationshipName %>Id: '',
            <%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType) ) { _%>
                <%= listFilterLayout[idx].name %>Start: '',
                <%= listFilterLayout[idx].name %>End: '',
              <%_ } else { _%>
                <%= listFilterLayout[idx].name %>: '',
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%>

            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType) ) { _%>
              <%= fields[idx].fieldName %>Start: '',
              <%= fields[idx].fieldName %>End: '',
            <%_ } else { _%>
              <%= fields[idx].fieldName %>: '', 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%>
              <%= rel.relationshipName %>Id: '',
          <%_ }) _%>
        <%_ } _%>
      },
      () => this.sortEntities()
    );
  };
  
  filterEntity = (event, errors, values) => {
    this.setState({
      ...this.state,
      ...values
    }, () => this.sortEntities());
  };
  

  <%_ if (pagination === 'infinite-scroll') { _%>
  componentDidUpdate() {
    if (this.props.updateSuccess) {
      this.reset();
    }
  }
  <%_ } _%>

  <%_ if (searchEngine === 'elasticsearch') { _%>
  search = () => {
    if (this.state.search) {
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.props.reset();
      <%_ } _%>
      <%_ if (pagination !== 'no') { _%>
      this.setState({ activePage: 1 }, () => {
        const { activePage, itemsPerPage, sort, order, search } = this.state;
        this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
      });
      <%_ } else { _%>
      this.props.getSearchEntities(this.state.search);
      <%_ } _%>
    }
  };

  clear = () => {
    <%_ if (pagination === 'infinite-scroll') { _%>
    this.props.reset();
    <%_ } _%>
    this.setState({ search: ''<% if (pagination !== 'no') { %>, activePage: 1<% } %> }, () => {
      this.props.getEntities()
    });
  };

  handleSearch = event => this.setState({ search: event.target.value });
  <%_ } _%>

  <%_ if (pagination === 'infinite-scroll') { _%>
  reset = () => {
    this.props.reset();
    this.setState({ activePage: 1 }, () => {
      this.getEntities();
    });
  };

  handleLoadMore = () => {
    if (window.pageYOffset > 0) {
      this.setState({ activePage: this.state.activePage + 1 }, () => this.getEntities());
    }
  };
  <%_ } _%>

  <%_ if (pagination !== 'no') { _%>
  sort = prop => () => {
    this.setState(
      {
        order: this.state.order === 'asc' ? 'desc' : 'asc',
        sort: prop
      },
      () => <% if (pagination === 'infinite-scroll') { %>{ this.reset(); }<% } else { %>this.sortEntities()<% } %>
    );
  };

  <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
    sortEntities() {
      this.getEntities();
      this.props.history.push(this.props.location.pathname +'?' + getEntityFiltersURL(this.state));
    }
  <%_ } _%>


  <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
  handlePagination = activePage => this.setState({ activePage }, () => this.sortEntities());
  <%_ } _%>

  getEntities = () => {
    this.props.reset();
    <%_ if (searchEngine === 'elasticsearch') { _%>
    const { activePage, itemsPerPage, sort, order, search } = this.state;
    if (search) {
      this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
    } else {
      this.props.getEntities(activePage - 1, itemsPerPage, `${sort},${order}`);
    }
    <%_ } else { _%>
    const {
      <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].name %>Start,
              <%= listFilterLayout[idx].name %>End,
              <%_ } else { _%>
                <%= listFilterLayout[idx].name %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%>
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, 
            <%= fields[idx].fieldName %>End, 
          <%_ } else { _%>
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      activePage, itemsPerPage, sort, order 
    } = this.state;
    this.props.getEntities(
      <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>getFilterFromSelect(<%= listFilterLayout[idx].entity.relationshipName %>Id, '<%= listFilterLayout[idx].entity.relationshipType %>'),<%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>Start, 
              <%= listFilterLayout[idx].entity.fieldName %>End, 
            <%_ } else { _%> 
              <%= listFilterLayout[idx].entity.fieldName %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%> 
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
          <%_ } else { _%> 
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%>getFilterFromSelect(<%= rel.relationshipName %>Id, '<%= rel.relationshipType %>'),<%_ }) _%>
      <%_ } _%>
      activePage - 1, itemsPerPage, `${sort},${order}`);
    <%_ } _%>
  };
  <%_ } _%>

  updateEntity = (entity) => {
    const {
       <%_ if (listFilterLayout.length > 0) {  _%>
        <%_ for (idx in listFilterLayout) { _%>
          <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
            <%= listFilterLayout[idx].entity.relationshipName %>Id,
          <%_ } else { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
              <%= listFilterLayout[idx].name %>Start,
              <%= listFilterLayout[idx].name %>End,
              <%_ } else { _%>
                <%= listFilterLayout[idx].name %>,
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      <%_ } else {  _%>
        <%_ for (idx in fields) { _%>
          <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
            <%= fields[idx].fieldName %>Start, 
            <%= fields[idx].fieldName %>End, 
          <%_ } else { _%>
            <%= fields[idx].fieldName %>, 
          <%_ } _%>
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
      <%_ } _%>
      activePage, itemsPerPage, sort, order 
    } = this.state;
    this.props.updateEntity(
      entity, [
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>getFilterFromSelect(<%= listFilterLayout[idx].entity.relationshipName %>Id, '<%= listFilterLayout[idx].entity.relationshipType %>'),<%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>Start, 
                <%= listFilterLayout[idx].entity.fieldName %>End, 
              <%_ } else { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>,
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%> 
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
              <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
            <%_ } else { _%> 
              <%= fields[idx].fieldName %>, 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%>getFilterFromSelect(<%= rel.relationshipName %>Id, '<%= rel.relationshipType %>'),<%_ }) _%>
        <%_ } _%>
      activePage - 1, itemsPerPage, `${sort},${order}`]);
  };



  renderHeader() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      <div id="page-heading">
        <span className="page-header"><Translate contentKey="<%= i18nKeyPrefix %>.home.title"><%= entityClassPluralHumanized %></Translate></span>
          <%_ if(typeof notListFilterLayout === 'undefined') { _%>
            <Button id="togglerFilter<%= entityReactName %>" color="primary" className="float-right jh-create-entity">
              <%_ if(typeof btnOpenFilter !== 'undefined') { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.btnOpenFilter"><%= btnOpenFilter %></Translate>
              <%_ } else { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.home.btn_filter_open">Filters</Translate>
              <%_ } _%>
              &nbsp;
            <FontAwesomeIcon icon="caret-down" />
          </Button>  &nbsp;
          <%_ } _%>


          <%_ if (typeof listTopButtons !== "undefined")  { _%>
            <%_ for (idx in listTopButtons) { _%>
              <%_ const attrib = listTopButtons[idx].attributes; _%>
                <Button className="float-right jh-create-entity" tag={<%=attrib['tag'] %>} to={<%-attrib['to'] %>} color="<%-attrib['color'] %>" size="<%-attrib['size'] %>">
                  <FontAwesomeIcon icon="<%=attrib['icon'] %>" /> <span className="d-none d-md-inline">
                    <Translate contentKey="<%= i18nKeyPrefix %>.listTopButtons.<%-listTopButtons[idx].name %>"><%-attrib['text'] %></Translate></span>
                </Button>
            <%_ } _%>
          <%_ } else { _%>
            <%_ if (!readOnly) { _%>
            <Link to={`${match.url}/new?${getEntityFiltersURL(state)}`} className="btn btn-primary float-right jh-create-entity" id="jh-create-entity">
              <FontAwesomeIcon icon="plus" />&nbsp;
              <%_ if(typeof btnNewItem !== 'undefined') { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.btnNewItem"><%= btnNewItem %></Translate>
              <%_ } else { _%>
                <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">Create a new <%= entityClassHumanized %></Translate>
              <%_ } _%>
            </Link>  &nbsp;
            <%_ } _%>
          <%_ } _%>



          </div>


          <ol className="breadcrumb">
            <li className="breadcrumb-item"><Link to="/"><Translate contentKey="global.menu.home">Home</Translate></Link></li>
            <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
              <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>"}><%= _.startCase((baseFilters+"s")) %></Link></li>
              <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + this.state[this.state.baseFilters] ? this.state[this.state.baseFilters+"Id"].label : ""}>{
                  this.state[this.state.baseFilters+"Id"] ? this.state[this.state.baseFilters+"Id"].label : "" 
              }</Link></li>
            <%_ } _%>
            <li className="breadcrumb-item active"><Translate contentKey="<%= i18nKeyPrefix %>.home.title"><%= entityClassPluralHumanized %></Translate></li>
          </ol>
      </>
    )
  }




  renderFilter() {
    <%_ if (typeof notListFilterLayout === 'undefined') {  _%>
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      <UncontrolledCollapse toggler="#togglerFilter<%= entityReactName %>">
          <CardBody>
            <AvForm ref={(el) => this.myFormRef = el} id="form-filter" onSubmit={this.filterEntity} >
                <div className="row mt-1 ml-3 mr-3">
                  <%_ if (typeof listFilterLayout!== "undefined" && listFilterLayout.length > 0) {  _%>
                    <%_ for (idx in listFilterLayout) { _%>
                      <%_ if(listFilterLayout[idx].type == 'field'){  _%>
                          <%- include('printFields/printFieldsFilters', {field: listFilterLayout[idx].entity}); -%>
                        <%_ } else {  _%>
                          <%- include('printFields/printRelationshipsFilters', {rel: listFilterLayout[idx].entity}); -%>
                      <%_ } _%>
                    <%_ } _%>
                  <%_ } else {  _%>
                    <%_ for (idx in fields) { _%>
                      <%- include('printFields/printFieldsFilters', {field: fields[idx]}); -%>
                   <%_ } _%>
                    <%_ relationships.forEach(rel => { _%>
                      <%- include('printFields/printRelationshipsFilters', {rel: rel}); -%>
                    <%_ }) _%>
                  <%_ } _%>
                </div>

                <div className="row mb-2 mr-4 justify-content-end">
                    <Button color="primary" type="submit">
                      <i className="fa fa-filter" aria-hidden={"true"}></i>&nbsp;
                      <Translate contentKey="<%= i18nKeyPrefix %>.btnFilter">Filter</Translate>
                    </Button>
                    &nbsp;
                    <Button color="secondary" onClick={this.cancelFilters}>
                      <FontAwesomeIcon icon="trash-alt" />&nbsp;
                      <Translate contentKey="<%= i18nKeyPrefix %>.btnCleanFilter">Clean Filter</Translate>                        
                    </Button>
                  </div>
          
              </AvForm>
          </CardBody>
        </UncontrolledCollapse>
      </>
    )
    <%_ } else { _%>
          return ( <> </> )
    <%_ } _%>
  }
  
  

  renderTable() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      {
        <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ?(
          <%_ if (typeof addComponenteListTable != "undefined" &&  addComponenteListTable != "false"){ _%>
            <<%= entityReactName %>ListComponent {...this.props} state={state} sortFunction={sortFunction} />
          <%_ } else {  _%>
            <%- include('printFields/entityListComponent'); -%>
          <%_ } _%>
        ) : (
            !this.props.loading 
            ? <div className="alert alert-warning">
                <Translate contentKey="<%= i18nKeyPrefix %>.home.notFound">
                  No <%= entityClassPluralHumanized %> found
                </Translate>
              </div> 
            : <div />
        )
      }
      </>
    )
  }
  

  renderFooter() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <>
      <%_ if (databaseType !== 'cassandra') { _%>
        <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
        <div className={ <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ? '' : 'd-none' }>
          <Row className="justify-content-center">
            <JhiItemCount
              page={this.state.activePage}
              total={totalItems}
              itemsPerPage={this.state.itemsPerPage}
              <%{ if (enableTranslation) { %>i18nEnabled<% }}%>
            />
          </Row>
          <Row className="justify-content-center">
            <ReactPaginate
              previousLabel={'<'}
              nextLabel={'>'}
              previousClassName={'page-item'}
              nextClassName={'page-item'}
              breakClassName={'page-item'}
              pageClassName={'page-item'}
              nextLinkClassName={'page-link'}
              previousLinkClassName={'page-link'}
              breakLinkClassName={'page-link'}
              pageLinkClassName={'page-link'}
              pageCount={this.props.totalItems / this.state.itemsPerPage}
              breakLabel={'...'}
              marginPagesDisplayed={2}
              pageRangeDisplayed={5}
              onPageChange={(v) => { if(v.selected >= 0) this.handlePagination(v.selected+1) } }
              containerClassName={'pagination'}
              subContainerClassName={'page-item'}
              activeClassName={'active'}
            />
          </Row>
        </div>
        <% } _%>
      <%_ } _%>
      </>
    )
  }

  

  render() {
    const { 
      <% uniqueRealtionFields.forEach(rel => {%> <%= rel %>,<% }) %> 
      <%=entityInstance %>List, match<% if (pagination === 'pagination' ||Â pagination === 'pager') { %>,
      totalItems<% } %>} = this.props;
    

    const props = this.props;
    const state = this.state;
    const sortFunction = this.sort;

    return (
      <Panel className="<%= entityFileName %> <%= entityFileName %>-list-table" <%_ if(baseFiltersModal) { %> isOpen <%_ } %>>
        <% if ((typeof hideHeader) === 'undefined') { %>
          <PanelHeader>
            { this.renderHeader() }
          </PanelHeader>
        <% } %>
          <PanelBody>
            <%_ if (searchEngine === 'elasticsearch') { _%>
            <Row>
              <Col sm="12">
                <AvForm onSubmit={this.search}>
                  <div>
                    <InputGroup>
                      <AvInput type="text" name="search" value={this.state.search} onChange={this.handleSearch}
                        placeholder=<% if (enableTranslation) { %>{translate('<%= i18nKeyPrefix %>.home.search')}<% } else { %>"Search"<% } %>/>
                      <Button className="input-group-addon">
                        <FontAwesomeIcon icon="search" />
                      </Button>
                      <Button type="reset" className="input-group-addon" onClick={this.clear}>
                        <FontAwesomeIcon icon="trash" />
                      </Button>
                    </InputGroup>
                  </div>
                </AvForm>
              </Col>
            </Row>
            <%_ } _%>


            <%_ if (typeof addComponenteBeforeListTable != "undefined" &&  addComponenteBeforeListTable != "false"){ _%>
              <<%= entityReactName %>BeforeComponent {...this.props}  />
            <%_ } _%>

            <div className="table-responsive">
              <%_ if (pagination === 'infinite-scroll') { _%>
              <InfiniteScroll pageStart={this.state.activePage}
                              loadMore={this.handleLoadMore}
                              hasMore={this.state.activePage - 1 < this.props.links.next}
                              loader={<div className="loader">Loading ...</div>}
                              threshold={0}
                              initialLoad={false}>
              <%_ } _%>
              <%_ if (typeof notListFilterLayout === 'undefined') {  _%>
                  { this.renderFilter() }
              <%_ } _%>

              { this.renderTable() }
              <%_ if (pagination === 'infinite-scroll') { _%>
              </InfiniteScroll>
              <%_ } _%>
            </div>

            <%_ if (typeof addComponenteAfterListTable != "undefined" &&  addComponenteAfterListTable != "false"){ _%>
              <<%= entityReactName %>AfterComponent {...this.props}  />
            <%_ } _%>

          </PanelBody>
          <PanelFooter>
            { this.renderFooter() }
          </PanelFooter>
        </Panel>
    );
  }
}


export const mapStateToProps = ({ ...storeState  }: IRootState) => { return {
  <%_ if (Object.keys(importEntities).length > 0){_%>
    <%_ for(const importEntity in importEntities) { _%>
      <%_ if (importEntities[importEntity] == 'Entity'){ _%>
        entity<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entity,
      <%_ } else if (importEntities[importEntity] == 'List') { _%>
        entities<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entities,
      <%_ } else { _%>
        entities<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entities,
        entity<%= importEntity %>: storeState.<%= (importEntity.charAt(0).toLowerCase() + importEntity.slice(1)) %>.entity,
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
  <%_ }) _%>
  <%= entityInstance %>List: storeState.<%= entityInstance %>.entities,
  <%_ if (pagination !== 'no') { _%>
  totalItems: storeState.<%= entityInstance %>.totalItems,
  <%_ } _%>
  loading: storeState.<%= entityInstance %>.loading,
  <%_ if (pagination === 'infinite-scroll') { _%>
  accountInfo: storeState.accountInfo.links,
  links: storeState.<%= entityInstance %>.links,
  entity: storeState.<%= entityInstance %>.entity,
  updateSuccess: storeState.<%= entityInstance %>.updateSuccess,
  <%_ } _%>
}};

export const  mapDispatchToProps = {
 <%_ if (searchEngine === 'elasticsearch') { _%>
 getSearchEntities,
 <%_ } _%>
 getEntities,

<%_ if (Object.keys(importEntities).length > 0){ _%>
  <%_ for(const importEntity in importEntities) { _%>
    <%_ if (importEntities[importEntity] == 'Entity'){ _%>
      getEntity<%= importEntity %>,
      update<%= importEntity %>,
    <%_ } else if (importEntities[importEntity] == 'List') { _%>
      getEntities<%= importEntity %>,
      update<%= importEntity %>,
    <%_ } else { _%>
      getEntities<%= importEntity %>,
      getEntity<%= importEntity %>,
      update<%= importEntity %>,
    <%_ } _%>
  <%_ } _%>
<%_ } _%>

 deleteEntity,
 updateEntity,
 reset
};

      export type StateProps = ReturnType<typeof mapStateToProps>;
      export type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>);
