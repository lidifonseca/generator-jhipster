

/* eslint complexity: ["error", 300] */
<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
    if (fields[idx].fieldIsEnum === true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
// const query = generateEntityQueries(relationships, entityInstance, dto);
// const queries = query.queries;
// const variables = query.variables;
// let hasManyToMany = query.hasManyToMany;
_%>
import React from 'react';
import { connect } from 'react-redux';
import Select from 'react-select';
import { Link, RouteComponentProps } from 'react-router-dom';
import InputMask from "react-input-mask";
import ReactQuill from 'react-quill'; 
import { quillEditorModules, quillEditorFormats } from 'app/shared/util/entity-utils';
import 'react-quill/dist/quill.snow.css'; 
<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
<%_ baseFiltersModal = true; _%>
import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody, ModalFooter as PanelFooter } from 'reactstrap';
<%_ } else { _%> 
import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 
import { AvFeedback, AvForm, AvGroup, AvInput<% if (fieldsIsReactAvField) { %>, AvField <% } %> } from
'availity-reactstrap-validation';
import {
Button,
Row,
Col,
Label
<% if (haveFieldWithJavadoc) { %>, UncontrolledTooltip<% } %> } from 'reactstrap';
import { translate }  from 'react-jhipster';
import {
Translate,
ICrudGetAction,
ICrudGetAllAction,
<%_ if (fieldsContainBlob) { _%>
  setFileData,
  <% if (fieldsContainBlobOrImage) { %> openFile,<% } %>
  <%_ } _%>
ICrudPutAction,
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IRootState } from 'app/shared/reducers';

<%_ if (formTabs.length > 0) { _%>
import { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';
import classnames from 'classnames';
<%_ } _%>

<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many') {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add({...uniqueRel, "otherEntityFieldCapitalized": uniqueRel.otherEntityFieldCapitalized, "relationshipFieldName": uniqueRel.relationshipFieldName, "namePlural": uniqueRel.otherEntityNamePlural, "name": uniqueRel.otherEntityName, "otherEntityField": uniqueRel.otherEntityField });
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      formLayoutListCondition: uniqueRel.formLayoutListCondition,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
<%_ } _%>
import { getAllEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from
'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>
import {
I<%= entityReactName %>UpdateState,
getEntity,
get<%= entityReactName %>State,
I<%= entityReactName %>BaseState, 
updateEntity,
createEntity,
<%_ if (fieldsContainBlob) { _%>
setBlob,
<%_ } _%>
reset
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { convertDateFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
<%_ if (relationships.filter(e => e.relationshipType === 'many-to-many') !== undefined) { _%>
import { mapIdList, viacepRequest } from 'app/shared/util/entity-utils';
<%_ } _%>

export interface I<%= entityReactName %>UpdateProps extends StateProps, DispatchProps, RouteComponentProps<{id: string}>
  {}


  export class <%= entityReactName %>Update extends React.Component<I<%= entityReactName %>UpdateProps,
    I<%= entityReactName %>UpdateState> {
    <%_ for (idx in fields) { %>
        <%= fields[idx].fieldName %>FileInput: React.RefObject<HTMLInputElement>;
    <%_ } _%>
    constructor(props: Readonly<I<%= entityReactName %>UpdateProps>) {
      super(props);
    <%_ for (idx in fields) { %>
      <%_  if (['byte[]', 'ByteBuffer'].includes(fields[idx].fieldType)) {  %>
        this.<%= fields[idx].fieldName %>FileInput = React.createRef();
      <%_ } %>
    <%_ } _%>
      this.state = {
      <% uniqueRealtionFields.forEach(rel => { %> 
      <%_ if (typeof baseFilters !== 'undefined' && baseFilters == rel.name) { _%>
        <%= rel.name %>SelectValue: parseInt(this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'], 10),
      <%_ }else{ _%> 
        <%= rel.name %>SelectValue: null, 
      <%_ } _%> 
      <% }) %>
      <%_ for (idx in fields) { _%>
        <%= typeof fields[idx].formLayoutCepBr !== 'undefined' && fields[idx].formLayoutCepBr.trim() ? "cepRequest" + fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() + " : null," : "" %>
      <%_ } _%>
      <%_ for (idx in fields) { _%>   
          <%= fields[idx].fieldName %>SelectValue: null,
      <%_ } _%>
      fieldsBase: {
        ...get<%= entityReactName %>State(this.props.location),
        <%_ if (typeof baseFilters !== 'undefined' && baseFilters) { _%>
          <%= baseFilters _%>Id: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'],
          baseFilters: '<%= baseFilters _%>',
        <%_ } _%>  
      },
      <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
      <%_ manyToManyOwners.forEach(val => { _%>
      ids<%= val.relationshipName %>: [],
      <%_ }) _%>
      <%_ relFieldNames.forEach(val => { _%>
        <%= val.relationshipFieldName + val.otherEntityFieldCapitalized %>: null,
      <%_ }) _%>
      isNew: !this.props.match.params || !this.props.match.params.id,
      };
      }
      <%_ if (formTabs.length > 0) { _%>
      toggleTab(tab: number) {
      if (this.state.activeTab !== tab) {
      this.setState({
      activeTab: tab
      });
      }
      }
      <%_ } _%>
      componentDidUpdate (prevProps) {
      if (prevProps.updateSuccess !== this.props.updateSuccess && prevProps.updateSuccess) {
        this.handleClose();
      }
      <% uniqueRealtionFields.forEach(rel => { %> 
        <% if(rel.relationshipType === "many-to-many") { %> 
          // data-type-rel -> tipo-1 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
        if ( 
           ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
           ( this.props.<%= rel.namePlural %>.length > 0 && this.state.<%= rel.name %>SelectValue === null && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %>) 
         ) {
          this.setState({
            <%= rel.name %>SelectValue:  this.props.<%= rel.namePlural %> ? this.props.<%= rel.namePlural %>.map(
              f => (this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %> ? (this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %>.map(p => (p !== null ? p.id : "")).includes(f.id) ? f.id : null): [])
            ).join(',') : null,
          })
        }
      <% } else { %>
        <% if ( rel.ownerSide ) { %>
          // data-type-rel -> tipo-2 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
          if ( 
            ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
            ( this.props.<%= rel.namePlural %> && this.state.<%= rel.name %>SelectValue === null  && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.id) 
          ) {
          this.setState({
            <%= rel.name %>SelectValue:  this.props.<%= rel.namePlural %> ? this.props.<%= rel.namePlural %>.map(
              f => this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> &&  this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.id === f.id ? f.id : null 
            ) : null,
          })
          }
        <% } else { %>
          // data-type-rel -> tipo-2 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
          if ( 
            ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
            ( this.props.<%= rel.namePlural %> && this.state.<%= rel.name %>SelectValue === null  && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.id) 
          ) {
          this.setState({
            <%= rel.name %>SelectValue:  this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> ? this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.id : null 
          })
          }
        <% } %>
        <% } %>
      <% }) %>

      <%_ for (idx in fields) { _%>
        <%_ if(fields[idx].formLayoutCepBr) { _%>
            if (( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id ) ||
              ( this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> && this.state.cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %> === null )) {
                this.setState({ cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>:  this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %>})
              }
        <%_ } _%>
        if (( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id ) ||
          ( this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> && this.state.<%= fields[idx].fieldName %>SelectValue === null )) {
            this.setState({ <%= fields[idx].fieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> })
          }
      <%_ } _%>

      }

      componentDidMount() {
      <%_ if (pagination === 'infinite-scroll') { _%>
      if (!this.state.isNew) {
      this.props.getEntity(this.props.match.params.id);
      }
      <%_ } else { _%>
      if (this.state.isNew) {
      this.props.reset();
      } else {
      this.props.getEntity(this.props.match.params.id);
      }
      <%_ } _%>

      <%_ otherEntityActions.forEach(val => { _%>
          this.props.<%= val.action %>();
      <%_ }) _%>
      }

      <%_ if (fieldsContainBlob) {_%>
      onBlobChange = (isAnImage, name, fileInput) => event => {
      const fileName = fileInput.current.files[0].name;
      setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType, fileName), isAnImage);
      };

      clearBlob = name => () => {
      this.props.setBlob(name, undefined, undefined);
      };
      <%_ } _%>
      getFiltersURL = (offset = null) => {
        const fieldsBase = this.state.fieldsBase;
        let url = '_back=1' + (offset !== null ? '&offset=' + offset : '');
        Object.keys(fieldsBase).map((key)=>{
          url += '&'+key+'=' + fieldsBase[key];
        }); 
        return url;
      };
      saveEntity = (event: any, errors: any, values: any) => {
      <%_ for (idx in fields) {
        const fieldType = fields[idx].fieldType;
        const fieldName = fields[idx].fieldName;
    _%>
      <%_ if (fieldType === 'Instant' || fieldType === 'ZonedDateTime')  { _%>
      values.<%=fieldName%> = convertDateTimeToServer(values.<%= fieldName %>);
      <%_ } _%>
      <%_ } _%>

      <% uniqueRealtionFields.forEach(rel => { %>
        <% if(rel.relationshipType === 'many-to-many') { %>          
          const <%= rel.otherEntityNamePlural %> = [];  // <%= rel.relationshipType %> -- <%= rel.ownerSide ? "ownerSide=true" : "ownerSide=false" %>
          this.props.<%= rel.otherEntityNamePlural %>.forEach(e => { if(this.state.<%= rel.name %>SelectValue && this.state.<%= rel.name %>SelectValue.split(",").indexOf(e.id+"") !== -1) { <%= rel.otherEntityNamePlural %>.push(e)}});
        <% } else { %>
            let <%= rel.relationshipFieldName %> = null;  // <%= rel.relationshipType %> -- <%= rel.ownerSide ? "ownerSide=true" : "ownerSide=false" %>
          this.props.<%= rel.otherEntityNamePlural %>.forEach(e => { if(e.id === this.state.<%= rel.name %>SelectValue) { <%= rel.relationshipFieldName %> = e}});
        <% } %>
      <% }) %>

      <%_ for (idx in fields) { _%> 
        <% const rulesValidate = fields[idx].fieldValidateRules ? fields[idx].fieldValidateRules : ""; _%>
        <%_ if(rulesValidate.includes('required') && fields[idx].formLayoutCepBr ){ %> 
          if (!this.state.cepRequest<%- fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>) {
            errors.push(translate('entity.validation.required'));
          }
        <%_ } _%>
      <%_ } _%>

      if (errors.length === 0) {
      const { <%= entityInstance %>Entity } = this.props;
      const entity = {
      ...<%= entityInstance %>Entity,
      ...values,
      <% uniqueRealtionFields.forEach(rel => { %><%= rel.relationshipType !== 'many-to-many' ? rel.relationshipFieldName : rel.otherEntityNamePlural %>, <% }) %>
      <%_ for (idx in fields) { _%>
        <%_ if(fields[idx].formLayoutCepBr) { _%>
            <%= fields[idx].fieldName %>:  this.state.cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>,
        <%_ } else { _%>
            <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue,
        <%_ } _%>
      <%_ } _%>
      }

      const {
        <%_ if (listFilterLayout.length > 0) {  _%>
         <%_ for (idx in listFilterLayout) { _%>
           <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
             <%= listFilterLayout[idx].entity.relationshipName %>Id,
           <%_ } else { _%>
             <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
               <%= listFilterLayout[idx].name %>Start,
               <%= listFilterLayout[idx].name %>End,
               <%_ } else { _%>
                 <%= listFilterLayout[idx].name %>,
             <%_ } _%>
           <%_ } _%>
         <%_ } _%>
       <%_ } else {  _%>
         <%_ for (idx in fields) { _%>
           <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
             <%= fields[idx].fieldName %>Start, 
             <%= fields[idx].fieldName %>End, 
           <%_ } else { _%>
             <%= fields[idx].fieldName %>, 
           <%_ } _%>
         <%_ } _%>
         <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
       <%_ } _%>
     } = this.state.fieldsBase;

      if (this.state.isNew) {
      this.props.createEntity(entity, [
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
              <%= listFilterLayout[idx].entity.relationshipName %>Id,
            <%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>Start, 
                <%= listFilterLayout[idx].entity.fieldName %>End, 
              <%_ } else { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>,
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%> 
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
              <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
            <%_ } else { _%> 
              <%= fields[idx].fieldName %>, 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
        <%_ } _%>
        ]);
      } else {
      this.props.updateEntity(entity, [
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
              <%= listFilterLayout[idx].entity.relationshipName %>Id,
            <%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>Start, 
                <%= listFilterLayout[idx].entity.fieldName %>End, 
              <%_ } else { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>,
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%> 
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
              <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
            <%_ } else { _%> 
              <%= fields[idx].fieldName %>, 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
        <%_ } _%>
        ]);
      }
      }
      }

      handleClose = () => {
      this.props.history.push(<%_ if (typeof baseFilters !== 'undefined' && baseFilters) { 
        _%> "/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters %>Id + <%_ 
      } %>"/<%= entityFileName %>?"+this.getFiltersURL());
      }

      renderHeader() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;

      <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
        let <%= baseFilters %>BaseFilter = null; 
        <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
      <%_ } _%>
      
      return (
        <> 
        <div id="page-heading">
          <span className="page-header ml-3">
              {this.state.isNew ? (
                <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">Create a <%= entityClass %></Translate>
              ) : (
                <Translate contentKey="<%= i18nKeyPrefix %>.home.editLabel">Edit a <%= entityClass %></Translate>
              )}
            
          </span>


          <Button color="primary" id="save-entity" type="submit" disabled={updating}
            className="float-right jh-create-entity">
            <FontAwesomeIcon icon="save" />&nbsp;
            <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
          </Button>
          <Button tag={Link} id="cancel-save" to={<%_ if (typeof baseFilters !== 'undefined' && baseFilters) { 
            _%> "/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters %>Id + <%_ 
          } %>"/<%= entityFileName %>?"+this.getFiltersURL()} replace color="info"
            className="float-right jh-create-entity">
            <FontAwesomeIcon icon="arrow-left" />&nbsp;
            <span className="d-none d-md-inline">
                <Translate contentKey="<%= i18nKeyPrefix %>.btnBack">Back</Translate>
            </span>
          </Button>
        </div>
      <ol className="breadcrumb">
        <li className="breadcrumb-item">
          <Link to="/">Inicio</Link>
        </li>
        <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>"}><%= _.startCase((baseFilters+"s")) %></Link></li>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters _%>Id}>{
            <%if (typeof baseFiltersAttributes !== 'undefined' && typeof baseFiltersAttributes['showField']!== 'undefined') { %>
              <%= entityInstance %>Entity.<%= baseFilters %> ? <%= entityInstance %>Entity.<%= baseFilters %>.<%= baseFiltersAttributes['showField'] %> : this.state.fieldsBase.<%= baseFilters _%>Id
            <% } else {%>
              this.state.fieldsBase.<%= baseFilters _%>Id
            <% }%>
          }</Link></li>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters _%>Id + "/<%= entityFileName %>"}><%= entityClassPluralHumanized %></Link></li>
        <%_ } else { _%>
          <li className="breadcrumb-item active"><Link to={"/<%= entityFileName %>"}><%= entityClassPluralHumanized %></Link></li>
        <%_ } _%>
        <li className="breadcrumb-item active"><%= entityClassPluralHumanized %> edit</li>
      </ol>
      
        </>
      )
      }
      renderBody() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;

      <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
        let <%= baseFilters %>BaseFilter = null; 
        <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
      <%_ } _%>
      
      return (
        <> 
    
        <Row className="justify-content-center">
          <Col md="8">
          { loading ? <p>Loading...</p> :
          <div>
            { !isNew ?
            <AvGroup>
              <Row>
                {/*
                <Col md="3">
                <Label className="mt-2" for="<%= entityFileName %>-id">
                  <Translate contentKey="global.field.id">ID</Translate>
                </Label>
                </Col> */}
                <Col md="12">
                  <AvInput id="<%= entityFileName %>-id" type="hidden" className="form-control" name="id" required readOnly />
                </Col>
              </Row>
            </AvGroup> 
            : null
            }
            <%_ if (formTabs.length === 0) { _%>
              <Row>
                  <%_ if (formLayout.length > 0) {  _%>
                      <%_ for (idx in formLayout) {  _%>
                        <%_ if(formLayout[idx].type == 'field'){ _%>
                            <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                          <%_ } else { _%>
                            <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                          <%_ }_%>
                      <%_ } _%>
                  <%_ } else { _%>
                      <%_ for (idx in fields) { _%> 
                          <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                      <%_ } _%>
                      <%_ relationships.forEach(rel => { _%> 
                          <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                      <%_ }) _%>
                  <%_ } _%>
              </Row>
            <%_ } else { _%>
            { !isNew ? <Nav tabs>
              <%_ for (idx in formTabs) { _%>
              <NavItem>
                <NavLink className={classnames({ active: this.state.activeTab===<%= idx %> })} onClick={()=> {
                  this.toggleTab(<%= idx %>); }}
                  >
                  <span className="d-sm-none"> <%= formTabs[idx] %></span>
                  <span className="d-sm-block d-none"><%= formTabs[idx] %></span>
                </NavLink>
              </NavItem>
              <%_ } _%>
              <%_ if(defaultFormTab) { _%>
              <NavItem>
                <NavLink className={classnames({ active: this.state.activeTab===<%= formTabs.length %> })}
                  onClick={()=> { this.toggleTab(<%= formTabs.length %>); }}
                  >
                  <span className="d-sm-none">Default</span>
                  <span className="d-sm-block d-none">Default</span>
                </NavLink>
              </NavItem>
              <%_ } _%>
            </Nav> : null }
            <TabContent activeTab={this.state.activeTab}>
              <%_ for (iTabs in formTabs) { _%>
              <TabPane tabId={<%= iTabs %>}>
                { isNew ?
                <Row className="justify-content-center mb-3">
                  <Col md="12">
                  <h2 id="<%= i18nKeyPrefix %>.home.formTabs_<%= idx %>">
                    <%= formTabs[iTabs] %>
                  </h2>
                  </Col>
                </Row> : null }

                <Row>
                  <%_ if (formLayout.length > 0) {  _%>
                        <%_ for (idx in formLayout) { _%>
                          <%_ if(formTabs[iTabs] === formLayout[idx].entity['formTab']) { _%>
                            <%_ if(formLayout[idx].type == 'field'){_%>
                              <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                            <%_ } else {_%>
                              <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                            <%_ }_%>
                          <%_ } _%>
                        <%_ } _%>
                  <%_ } else { _%>
                        <%_ for (idx in fields) { _%>
                          <%_ if(formTabs[iTabs] === fields[idx]['formTab']) { _%>
                                <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                          <%_ } _%>
                        <%_ } _%>
                        <%_ relationships.forEach(rel => { _%>
                          <%_ if(formTabs[iTabs] === rel['formTab']) {  _%>
                            <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                          <%_ } _%>
                        <%_ }) _%>
                  <%_ } _%>
                </Row> 

                <%_ if(Number.parseInt(iTabs, 10) + 1 < formTabs.length + (defaultFormTab ? 1 : 0)  ) { _%>
                { isNew ?
                <Button color="primary" className={"float-right jh-create-entity"} onClick={()=> {
                  this.toggleTab(<%= Number.parseInt(iTabs, 10) + 1 %>); }}
                  >
                  <span className="d-sm-none">
                    <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                  </span>
                  <span className="d-sm-block d-none">
                    <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                    &nbsp;
                    <FontAwesomeIcon icon="arrow-right" />
                  </span>
                </Button>
                : null }
                <%_ } else { _%>
                { isNew ?
                <Button color="primary" id="save-entity" type="submit" disabled={updating}
                  className="btn btn-primary float-right jh-create-entity">
                  <FontAwesomeIcon icon="save" />&nbsp;
                  <Translate contentKey="<%= i18nKeyPrefix %> %>.btnSave">Save</Translate>
                </Button>
                : null }
                <%_ } _%>

                <%_ if(iTabs > 0 ) { _%>
                { isNew ?
                <Button color="info" className={"float-right jh-create-entity"} onClick={()=> {
                  this.toggleTab(<%= Number.parseInt(iTabs, 10) - 1 %>); }}
                  >

                  <span className="d-sm-none"> <%= formTabs[Number.parseInt(iTabs, 10) - 1] %> </span>
                  <span className="d-sm-block d-none">
                    <FontAwesomeIcon icon="arrow-left" />&nbsp;
                    <%= formTabs[Number.parseInt(iTabs, 10) - 1] %>
                  </span>
                </Button>
                : null }
                <%_ } _%>
              </TabPane>
              <%_ } _%>
              <%_ if(defaultFormTab) { _%>
              <TabPane tabId={<%= formTabs.length %>}>
                { isNew ?
                <Row className="justify-content-center mb-3">
                  <Col md="12">
                  <h2 id="<%= i18nKeyPrefix %>.home.formTabs_default">
                    Default
                  </h2>
                  </Col>
                </Row> : null }

                <%_ if (formLayout.length > 0) {  _%>
                        <%_ for (idx in formLayout) {  _%>
                          <%_ if(!formLayout[idx].entity['formTab'] || formLayout[idx].entity['formTab'] === "default") {  _%>
                            <%_ if(formLayout[idx].type == 'field'){ _%>
                              <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                            <%_ } else { _%>
                              <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                            <%_ } _%>
                          <%_ }  _%>
                        <%_ } _%>
                <%_ } else { _%>
                  <%_ for (idx in fields) { _%> 
                    <%_ if(!fields[idx]['formTab'] || fields[idx]['formTab'] === "default") {  _%>
                      <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                    <%_ } _%>
                  <%_ } _%>
                  <%_ relationships.forEach(rel => { _%> 
                    <%_ if(!rel['formTab'] || rel['formTab'] === "default") {  _%>
                      <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                    <%_ } _%>
                  <%_  }) _%>
                <%_ } _%>


                { isNew ?
                <Button color="primary" id="save-entity" type="submit" disabled={updating}
                  className="btn btn-primary float-right jh-create-entity">
                  <FontAwesomeIcon icon="save" />&nbsp;
                  <Translate contentKey="<%= i18nKeyPrefix %> %>.btnSave">Save</Translate>
                </Button>
                : null }

                <%_ if(formTabs.length > 0 ) { _%>
                { isNew ?
                <Button color="info" className={"float-right jh-create-entity "}
                               onClick={() => { this.toggleTab(<%= formTabs.length -1 %>); }}
                               >
                                  
                                 <span className=" d-sm-none"> <%= formTabs[formTabs.length - 1] %> </span>
                  <span className="d-sm-block d-none">
                    <FontAwesomeIcon icon="arrow-left" />&nbsp;
                    <%= formTabs[formTabs.length - 1] %>
                  </span>
                </Button>
                : null }
                <%_ } _%>

              </TabPane>
              <%_ } _%>

            </TabContent>
            <%_ } _%>

          </div>

          }
          </Col>
        </Row>

        </>
      )
      }

      render() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;

      <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
        let <%= baseFilters %>BaseFilter = null; 
        <%= baseFilters %>s.map((p)=>{ if(p.id === parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10)) <%= baseFilters %>BaseFilter = p });
      <%_ } _%>
      
      return (
        <div>
            <AvForm model={isNew ? {
              <%_ for (idx in fields) { _%>
                <%_ if (typeof fields[idx].formLayoutDefault !== "undefined") { _%>
                  <%= fields[idx].fieldName %>: <%- fields[idx].formLayoutDefault %>,
                <%_ } _%>
              <%_ } _%>
            } : {
              ...<%= entityInstance %>Entity, 
              <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
            } } onSubmit={this.saveEntity}>
          <Panel <%_ if(baseFiltersModal) { %> isOpen <%_ } %>>
            <PanelHeader>
              { this.renderHeader() }
            </PanelHeader>
            <PanelBody>
              { this.renderBody() }
            </PanelBody>
          </Panel>
        </AvForm>
      </div>
      );
      }
      }

      export  const mapStateToProps = (storeState: IRootState) => ({
      <%_ otherEntityActions.forEach(val => { _%>
      <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
      <%_ }) _%>
      <%= entityInstance %>Entity: storeState.<%= entityInstance %>.entity,
      loading: storeState.<%= entityInstance %>.loading,
      updating: storeState.<%= entityInstance %>.updating,
      updateSuccess: storeState.<%= entityInstance %>.updateSuccess,
      });

      export const mapDispatchToProps = {
      <%_ otherEntityActions.forEach(val => { _%>
      <%= val.action %>,
      <%_ }) _%>
      getEntity,
      updateEntity,
      <%_ if (fieldsContainBlob) { _%>
      setBlob,
      <%_ } _%>
      createEntity,
      reset
      };

      type StateProps = ReturnType<typeof mapStateToProps>;
        type DispatchProps = typeof mapDispatchToProps;

        export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>Update);