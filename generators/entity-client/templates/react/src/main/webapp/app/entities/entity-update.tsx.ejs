

/* eslint complexity: ["error", 300] */
/* eslint no-empty: off */
<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
    if (fields[idx].fieldIsEnum === true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
// const query = generateEntityQueries(relationships, entityInstance, dto);
// const queries = query.queries;
// const variables = query.variables;
// let hasManyToMany = query.hasManyToMany;
_%>
import React from 'react';
import { connect } from 'react-redux';
import Select from 'react-select';
import SelectAsync from 'react-select/async';
import axios from 'axios';
import { Link, RouteComponentProps } from 'react-router-dom';
import InputMask from "react-input-mask";
import ReactQuill from 'react-quill'; 
import CurrencyInput from 'react-currency-input';
import { quillEditorModules, quillEditorFormats, getFilterFromSelect, getFormFromSelect, getListAxios, getValueRecursive, showFieldsSelectAsync } from 'app/shared/util/entity-utils';
import 'react-quill/dist/quill.snow.css'; 
import { toast } from 'react-toastify';
<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
<%_ baseFiltersModal = true; _%>
import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody, ModalFooter as PanelFooter } from 'reactstrap';
<%_ } else { _%> 
import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 
import { AvFeedback, AvForm, AvGroup, AvInput, AvField } from
'availity-reactstrap-validation';
import {
Button,
Row,
Table, Modal, ModalHeader, ModalBody, ModalFooter,
Col,
Label
<% if (haveFieldWithJavadoc) { %>, UncontrolledTooltip<% } %> } from 'reactstrap';
import {
ICrudGetAction, 
ICrudGetAllAction,
<%_ if (fieldsContainBlob) { _%>
  setFileData,
  <% if (fieldsContainBlobOrImage) { %> openFile,<% } %>
  <%_ } _%>
ICrudPutAction,
} from 'react-jhipster';
import { Translate, translate } from 'app/config/translate-component';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IRootState } from 'app/shared/reducers';

<%_ if (formTabs.length > 0) { _%>
import { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';
import classnames from 'classnames';
<%_ } _%>

import { getSortState } from 'react-jhipster';
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';

<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let hasOneToOneNotOwner = false;
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if(rel.relationshipType ==="one-to-one" && rel.ownerSide  === false && typeof baseFilters !== 'undefined' && baseFilters === rel.relationshipName  ){
        hasOneToOneNotOwner = true;
      }
      if (rel.relationshipType === 'many-to-many') {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key]) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add({"namePlural": uniqueRel.otherEntityNamePlural, "name": uniqueRel.otherEntityName, "relationshipFieldName": uniqueRel.relationshipFieldName });
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      formLayoutListCondition: uniqueRel.formLayoutListCondition,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
<%_ } _%>
<%_ }
  }
}); _%>
import {
I<%= entityReactName %>UpdateState as IBaseUpdateState,
getEntity,
get<%= entityReactName %>State,
getUrlBack,
I<%= entityReactName %>BaseState, 
updateEntity,
createEntity,
getEntityOffset,
<%_ if (fieldsContainBlob) { _%>
setBlob,
<%_ } _%>
reset,
<%_ if (formLayout.length > 0) {  _%>
  <%_ for (idx in formLayout) {  _%>
    <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
    <%_ const embebedEntity = formLayout[idx].entity; _%>
      <%= embebedEntity.relationshipName %>SetEntities,
      <%= embebedEntity.relationshipName %>GetEntities,
      <%= embebedEntity.relationshipName %>UpdateEntity,
      <%= embebedEntity.relationshipName %>Reset,
      <%= embebedEntity.relationshipName %>GetEntity,
      <%= embebedEntity.relationshipName %>CreateEntity,
      <%= embebedEntity.relationshipName %>DeleteEntity,
    <%_ } _%>
  <%_ } _%>
<%_ } _%>

} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { convertDateFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
import { mapIdList, viacepRequest } from 'app/shared/util/entity-utils';


<%_ for (idx in componentList) {  _%>
  import <%= componentList[idx].name %> from './components/<%= componentList[idx].name %>';
<%_ } _%>


<%_ if (formLayout.length > 0) {  _%>
  <%_ for (idx in formLayout) {  _%>
    <%_  if(formLayout[idx].type != 'field' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
    <%_ const embebedEntity = formLayout[idx].entity; _%>

      <%_  if(formLayout[idx].type != 'field' && formLayout[idx].entity['formLayoutEmbebedExtended'] === "true"){ _%>
        import { 
          mapStateToPropsExtended as mapStateToProps<%= embebedEntity.relationshipNameCapitalized %>, 
          mapDispatchToPropsExtended as mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>, 
          <%= embebedEntity.relationshipNameCapitalized %>Extended as <%= embebedEntity.relationshipNameCapitalized %> 
        } from 'app/entities/<%= embebedEntity.otherEntityPath %>/extended/<%= embebedEntity.otherEntityPath %>';   
      <%_ } else { _%>
        import { 
          mapStateToProps as mapStateToProps<%= embebedEntity.relationshipNameCapitalized %>, 
          mapDispatchToProps as mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>, 
          <%= embebedEntity.relationshipNameCapitalized %> 
        } from 'app/entities/<%= embebedEntity.otherEntityPath %>/<%= embebedEntity.otherEntityPath %>';   
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
<%_ } _%>


  <%_ if (typeof generator['extendForm'] != "undefined" &&  generator['extendForm'] != "false"){ %>
    import { StatePropsExtended, DispatchPropsExtended, IUpdateExtendedState } from './extended/<%= entityFileName %>-update';
  <%_ } _%>

  
import DatePicker, { registerLocale } from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { pt } from 'date-fns/esm/locale';
import moment from 'moment';
registerLocale('pt', pt);
  
  <%_ if (typeof generator['extendForm'] != "undefined" &&  generator['extendForm'] != "false"){ %>
    export interface I<%= entityReactName %>UpdateProps extends StateProps, DispatchProps, StatePropsExtended, DispatchPropsExtended, RouteComponentProps<{url: string}> {}
    export interface I<%= entityReactName %>UpdateState extends IBaseUpdateState, IUpdateExtendedState {}
  <%_ } else { _%>
    export interface I<%= entityReactName %>UpdateProps extends StateProps, DispatchProps, RouteComponentProps<{id: string}>{}
    export interface I<%= entityReactName %>UpdateState extends IBaseUpdateState {}
  <%_ } _%>
  

  export class <%= entityReactName %>Update extends React.Component<I<%= entityReactName %>UpdateProps,
    I<%= entityReactName %>UpdateState> {
    <%_ for (idx in fields) { %>
        <%= fields[idx].fieldName %>FileInput: any;
    <%_ } _%>
    constructor(props: Readonly<I<%= entityReactName %>UpdateProps>) {
      super(props);


      <%_ if (formLayout.length > 0) {  _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
          <%_ const embebedEntity = formLayout[idx].entity; _%>
            this.<%= embebedEntity.relationshipName %>UpdateEntity = this.<%= embebedEntity.relationshipName %>UpdateEntity.bind(this);
            this.<%= embebedEntity.relationshipName %>GetEntities = this.<%= embebedEntity.relationshipName %>GetEntities.bind(this);
            this.<%= embebedEntity.relationshipName %>Reset = this.<%= embebedEntity.relationshipName %>Reset.bind(this);
            this.<%= embebedEntity.relationshipName %>GetEntity = this.<%= embebedEntity.relationshipName %>GetEntity.bind(this);
            this.<%= embebedEntity.relationshipName %>CreateEntity = this.<%= embebedEntity.relationshipName %>CreateEntity.bind(this);
            this.<%= embebedEntity.relationshipName %>DeleteEntity = this.<%= embebedEntity.relationshipName %>DeleteEntity.bind(this);
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>



    <%_ for (idx in fields) { %>
      <%_  if (['byte[]', 'ByteBuffer'].includes(fields[idx].fieldType)) {  %>
        this.<%= fields[idx].fieldName %>FileInput = React.createRef();
      <%_ } %>
    <%_ } _%>
      this.state = {
        listCheckedModalSuperSelectID: [],
        listCheckedModalSuperSelectFilters: {},
        modalSuperSelect: '',
        functionEmbebed: [],
      <% relationships.forEach(rel => { %> 
      <%_ if (typeof baseFilters !== 'undefined' && baseFilters == rel.relationshipFieldName) { _%>
        <%= rel.relationshipFieldName %>SelectValue: { value: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'], label: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'] },
      <%_ }else{ _%> 
        <%= rel.relationshipFieldName %>SelectValue: null, 
      <%_ } _%> 
      <% }) %>
      <%_ for (idx in fields) { _%>
        <%= typeof fields[idx].formLayoutCepBr !== 'undefined' && fields[idx].formLayoutCepBr.trim() ? "cepRequest" + fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() + " : null," : "" %>
      <%_ } _%>
      <%_ for (idx in fields) { _%>   
          <%- fields[idx].fieldName %>SelectValue: <%- fields[idx].formLayoutDefaultValue ? fields[idx].formLayoutDefaultValue : 'null' %>,
      <%_ } _%>
      fieldsBase: {
        ...getSortState(this.props.location, ITEMS_PER_PAGE),
        ...get<%= entityReactName %>State(this.props.location),
        urlBack: getUrlBack(this.props.location),
        <%_ if (typeof baseFilters !== 'undefined' && baseFilters) { _%>
          <%= baseFilters _%>Id:  [{ value: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'], label: this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'] }],
          baseFilters: '<%= baseFilters _%>',
        <%_ } _%>  
      },
      <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
      <%_ manyToManyOwners.forEach(val => { _%>
      ids<%= val.relationshipName %>: [],
      <%_ }) _%>
      <%_ relFieldNames.forEach(val => { _%>
        <%= val.relationshipFieldName + val.otherEntityFieldCapitalized %>: null,
      <%_ }) _%>
      <%_ if (hasOneToOneNotOwner) { %> 
        isNew: false,
      <% } else { %> 
        isNew: !this.props.match.params || !this.props.match.params['id'],
      <% } %> 
      };
      }
      <%_ if (formTabs.length > 0) { _%>
        toggleTab(tab: number) {
          if (this.state.activeTab !== tab) {
            this.setState({ activeTab: tab });
          }
        }
        tabsNext(tab: number, tabAtual?: number) {

          <%_ for (iTabs in formTabs) { _%>
            if (typeof tabAtual !== "undefined" && tabAtual === <%= iTabs %> ) {
              <%_ for (idx in formLayout) { _%>
                <%_ if(formTabs[iTabs] === formLayout[idx].entity['formTab'] && formLayout[idx].type === "field") { _%>
                  <% const field = formLayout[idx].entity; _%>
                  <% const rulesValidate = field.fieldValidateRules ? field.fieldValidateRules : ""; _%>
                  <%_ if(rulesValidate.includes('required') && field.fieldIsEnum === false) { %> 
                    <%_ if(field.formLayoutCepBr) { _%>
                      if (!this.state.cepRequest<%= field.formLayoutCepBr.slice(0, 1).toUpperCase() + field.formLayoutCepBr.slice(1).toLowerCase() %>) {
                        toast.error(translate('generadorApp.validators.required', {fieldName: translate('generadorApp.<%= entityInstance %>.<%= field.fieldName %>')})); return false;
                      }
                    <%_ } else { _%>
                      if (!this.state.<%= field.fieldName %>SelectValue) {
                        toast.error(translate('generadorApp.validators.required', {fieldName: translate('generadorApp.<%= entityInstance %>.<%= field.fieldName %>')})); return false;
                      }
                    <%_ } _%>
                  <%_ } _%>
                <%_ } _%>
              <%_ } _%>
            }
          <%_ } _%>
          this.toggleTab(tab)
        }

      <%_ } _%>


      <%_ if (formLayout.length > 0) {  _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
          <%_ const embebedEntity = formLayout[idx].entity; _%>
            <%= embebedEntity.relationshipName %>UpdateEntity = (...values) => {
              values[0]['<%= entityInstance %>']= (!this.state.isNew ? {id: this.props.match.params['id']} : "is_new");
              if(!this.state.isNew) {
                this.props['updateEntity<%= embebedEntity.relationshipNameCapitalized %>'](...values)
              }
              return this.props.<%= embebedEntity.relationshipName %>UpdateEntity(...values);
            }
            <%= embebedEntity.relationshipName %>GetEntities = (...values) => {
              return this.props.<%= embebedEntity.relationshipName %>GetEntities(...values);
            }
            <%= embebedEntity.relationshipName %>Reset = (...values) => {
              return this.props.<%= embebedEntity.relationshipName %>Reset(...values);
            }
            <%= embebedEntity.relationshipName %>GetEntity = (...values) => {
              return this.props.<%= embebedEntity.relationshipName %>GetEntity(...values);
            }
            <%= embebedEntity.relationshipName %>CreateEntity = (...values) => {
              values[0]['<%= entityInstance %>']= (!this.state.isNew ? {id: this.props.match.params['id']} : "is_new");
              if(!this.state.isNew) {
                this.props['createEntity<%= embebedEntity.relationshipNameCapitalized %>'](...values)
              }
              return this.props.<%= embebedEntity.relationshipName %>CreateEntity(...values);
            }
            <%= embebedEntity.relationshipName %>DeleteEntity = (...values) => {
              if(!this.state.isNew) {
                this.props['deleteEntity<%= embebedEntity.relationshipNameCapitalized %>'](...values)
              }
              return this.props.<%= embebedEntity.relationshipName %>DeleteEntity(...values);
            }
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>


      componentDidUpdate (prevProps) {
        if (prevProps.updateSuccess !== this.props.updateSuccess && prevProps.updateSuccess) {
          this.handleClose();
        }
        <%_ if (hasOneToOneNotOwner) { %> 
          if ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id && this.props.<%= entityInstance %>Entity.id > 0)  {
            if ( this.props.<%= entityInstance %>Entity.id > 0 )  {
              this.setState({ isNew: false})
            } else {
              this.setState({ isNew: true})
            }
          }
        <% } %> 
        <% relationships.forEach(rel => { %> 
          <% if(rel.relationshipType === "many-to-many") { %> 
            // data-type-rel -> tipo-1 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
          if ( 
             ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
             ( this.props.<%= rel.otherEntityNamePlural %>.length > 0 && this.state.<%= rel.relationshipFieldName %>SelectValue === null && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %>) 
           ) {
              <%_  if(rel['formLayoutEmbebed'] === "true"){ _%>
                <%_ const embebedEntity = formLayout[idx].entity; _%>
                this.setState({<%= rel.relationshipFieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %>});
                this.props.<%= embebedEntity.relationshipName %>SetEntities(this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %>);
              <%_ } else { _%>
                <%_ const showFields = rel['formLayoutShowFields'] ? rel.formLayoutShowFields : (rel.otherEntityField ? rel.otherEntityField : 'id'); _%>
                this.setState({
                  <%= rel.relationshipFieldName %>SelectValue: this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %> 
                      ? (this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldNamePlural %>.filter(p=>p).map(p => ({value: p.id, label: <%- "("+showFields.split(";").map(v=>"p['" + v.split(".").map((x,i)=>v.split(".").filter((y,j)=>j<=i).join("']['")).filter(x=>x).join("'] && p['") + "'] ? p." + v + " : ''" ).join(")+ ' | ' +(") + ")" %>})))
                      : []
                })
              <%_ } _%>
          }
        <% } else if(rel.relationshipType === "one-to-many" ) { %> 
          // data-type-rel -> tipo-2 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
        if ( 
           ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
           ( this.props.<%= rel.otherEntityNamePlural %>.length > 0 && this.state.<%= rel.relationshipFieldName %>SelectValue === null && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>) 
         ) {
          <%_  if(rel['formLayoutEmbebed'] === "true"){ _%>
            this.setState({<%= rel.relationshipFieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>});
            this.props.<%= rel.relationshipName %>SetEntities(this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>);
          <%_ } else { _%>
            <%_ const showFields = rel['formLayoutShowFields'] ? rel.formLayoutShowFields : (rel.otherEntityField ? rel.otherEntityField : 'id'); _%>
            this.setState({
              <%= rel.relationshipFieldName %>SelectValue: this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> 
                  ? (this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.filter(p=>p).map(p => ({value: p.id, label: <%- "("+showFields.split(";").map(v=>"p['" + v.split(".").map((x,i)=>v.split(".").filter((y,j)=>j<=i).join("']['")).filter(x=>x).join("'] && p['") + "'] ? p." + v + " : ''" ).join(")+ ' | ' +(") + ")" %>})))
                  : []
            })
          <% } %>
  
        }
      <% } else { %>
          <% if ( rel.ownerSide ) { %>
            // data-type-rel -> tipo-3 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
            if ( 
              ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
              ( this.props.<%= rel.otherEntityNamePlural %> && this.state.<%= rel.relationshipFieldName %>SelectValue === null  && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.id) 
            ) {
              <%_  if(rel['formLayoutEmbebed'] === "true"){ _%>
                <%_ const embebedEntity = formLayout[idx].entity; _%>
                this.setState({<%= rel.relationshipFieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>});
                this.props.<%= embebedEntity.relationshipName %>SetEntities(this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>);
              <%_ } else { _%>
                <%_ const showFields = rel['formLayoutShowFields'] ? rel.formLayoutShowFields : (rel.otherEntityField ? rel.otherEntityField : 'id'); _%>
                const p = this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> ? this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> : null
                this.setState({
                  <%= rel.relationshipFieldName %>SelectValue: p 
                      ? {...p, value: p.id, label: <%- "("+showFields.split(";").map(v=>"p['" + v.split(".").map((x,i)=>v.split(".").filter((y,j)=>j<=i).join("']['")).filter(x=>x).join("'] && p['") + "'] ? p." + v + " : ''" ).join(")+ ' | ' +(") + ")" %>}
                      : null
                })
              <% } %>
            }
          <% } else { %>
            // data-type-rel -> tipo-4 <%= rel.relationshipType %> <%= rel.ownerSide ? "owner-side" : "other-side" %>
            if ( 
              ( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id) ||
              ( this.props.<%= rel.otherEntityNamePlural %> && this.state.<%= rel.relationshipFieldName %>SelectValue === null  && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>.id) 
            ) {
              <%_  if(rel['formLayoutEmbebed'] === "true"){ _%>
                <%_ const embebedEntity = formLayout[idx].entity; _%>
                this.setState({<%= rel.relationshipFieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>});
                this.props.<%= embebedEntity.relationshipName %>SetEntities(this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %>);
              <%_ } else { _%>
                <%_ const showFields = rel['formLayoutShowFields'] ? rel.formLayoutShowFields : (rel.otherEntityField ? rel.otherEntityField : 'id'); _%>
                const p = this.props.<%= entityInstance %>Entity && this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> ? this.props.<%= entityInstance %>Entity.<%= rel.relationshipFieldName %> : null
                this.setState({
                  <%= rel.relationshipFieldName %>SelectValue: p 
                      ? {...p, value: p.id, label: <%- "("+showFields.split(";").map(v=>"p['" + v.split(".").map((x,i)=>v.split(".").filter((y,j)=>j<=i).join("']['")).filter(x=>x).join("'] && p['") + "'] ? p." + v + " : ''" ).join(")+ ' | ' +(") + ")" %>}
                      : null
                })
             <% } %>
            }
          <% } %>
          <% } %>
        <% }) %>
  
        <%_ for (idx in fields) { _%>
          <%_ if(fields[idx].formLayoutCepBr) { _%>
              if (( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id ) ||
                ( this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> && this.state.cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %> === null )) {
                  this.setState({ cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>:  this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %>})
                  // this.setState({ <%= fields[idx].fieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> })
                }
          <%_ } _%>
          if (( prevProps.<%= entityInstance %>Entity && prevProps.<%= entityInstance %>Entity.id !==  this.props.<%= entityInstance %>Entity.id ) ||
            ( this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> && this.state.<%= fields[idx].fieldName %>SelectValue === <%- fields[idx].formLayoutDefaultValue ? fields[idx].formLayoutDefaultValue : 'null' %> )) {
              this.setState({ <%= fields[idx].fieldName %>SelectValue: this.props.<%= entityInstance %>Entity.<%= fields[idx].fieldName %> })
            }
        <%_ } _%>
  
        }

        removeAllArrayItem(arr, value) {
          let i = 0;
          while (i < arr.length) {
            if (arr[i] === value) {
              arr.splice(i, 1);
            } else {
              ++i;
            }
          }
          return arr;
        }

  
        handleInputModalSuperSelectChange(selected, multiple) {
          let listCheckedModalSuperSelectID: any = multiple ? this.state.listCheckedModalSuperSelectID : [];
          if (listCheckedModalSuperSelectID.map(v => v['value'] + '').includes(selected.value + '')) {
            listCheckedModalSuperSelectID = listCheckedModalSuperSelectID.filter(v => v['value'] + '' !== selected.value + '');
          } else {
            listCheckedModalSuperSelectID.push(selected);
          }
          this.setState({ listCheckedModalSuperSelectID: multiple ? listCheckedModalSuperSelectID : listCheckedModalSuperSelectID[0] });
        }
      
        handleInputAllModalSuperSelectThisItens(evt, listChecked, label) {
          if (evt.target.checked) {
            this.setState({ listCheckedModalSuperSelectID: listChecked.data.map(v => ({...v, value: v.id, label: v[label] })) });
          } else {
            this.setState({ listCheckedModalSuperSelectID: [] });
          }
        }
      
      
      renderModalSuperSelect(entity, listEntity, template, stateField, multiple, showFields?, order?, filtersBase={}) {
        return (
          <>
            <Button
              color="secondary"
              className="super-select-button"
              onClick={async () => {
                if (this.state[stateField]) {
                  this.setState({
                    listCheckedModalSuperSelectID: this.state[stateField],
                    listCheckedModalSuperSelectFilters: {},
                    modalSuperSelect: entity,
                    listCheckedModalSuperEntities: await getListAxios(listEntity, filtersBase, 0, 100, order ? order : 'id,asc'),
                  });
                } else {
                  this.setState({
                    listCheckedModalSuperSelectFilters: {},
                    modalSuperSelect: entity,
                    listCheckedModalSuperEntities: await getListAxios(listEntity, filtersBase, 0, 100, order ? order : 'id,asc'),
                  });
                }
              }}
            >
              <FontAwesomeIcon icon="filter" />
              &nbsp;
            </Button>
            {this.state.modalSuperSelect === entity ? (
              <Modal
                size="xl"
                isOpen={true}
                toggle={() =>
                  this.setState({ listCheckedModalSuperSelectID: [], listCheckedModalSuperSelectFilters: {}, modalSuperSelect: '' })
                }
              >
                <ModalHeader
                  toggle={() =>
                    this.setState({ listCheckedModalSuperSelectID: [], listCheckedModalSuperSelectFilters: {}, modalSuperSelect: '' })
                  }
                >
                  <Translate contentKey={'generadorApp.' + entity + '-modal-super-select-title'}> Select Entity</Translate>
                </ModalHeader>
                <ModalBody>
                  <div style={{ height: '500px', overflow: 'auto' }}>
                    <Table id={'filter-table-list-' + entity} responsive className={'table-hover table-striped mt-4 table-responsive-css'}>
                      <thead>
                        <tr>
                          <th className={'align-middle text-center'} style={{ width: '4%' }}>
                            <input
                              type={multiple ? 'checkbox' : 'hidden'}
                              onChange={evt =>
                                this.handleInputAllModalSuperSelectThisItens(evt, this.state.listCheckedModalSuperEntities, showFields)
                              }
                            />
                          </th>
                          {Object.keys(template).map((v, i) => (
                            <th key={'list-' + entity + '-' + i}>
                              <AvField
                                name={'list-' + entity + '-' + i}
                                type="text"
                                style={v === 'id' ? { width: '60px' } : {}}
                                onChange={async evt => {
                                  const listCheckedModalSuperSelectFilters = this.state.listCheckedModalSuperSelectFilters;
                                  listCheckedModalSuperSelectFilters[i] = evt.target.value;

                                  const _filters = {...filtersBase};
                                  Object.keys(listCheckedModalSuperSelectFilters).map((v2, k) => {
                                    if (listCheckedModalSuperSelectFilters[v2])
                                      _filters[template[v2] + '.contains'] = listCheckedModalSuperSelectFilters[v2];
                                  });

                                  this.setState({
                                    listCheckedModalSuperSelectFilters,
                                    listCheckedModalSuperEntities: await getListAxios(listEntity, _filters, 0, 100, order ? order : 'id,asc'),
                                  });
                                }}
                                value={this.state.listCheckedModalSuperSelectFilters[i] ? this.state.listCheckedModalSuperSelectFilters[i] : ''}
                                placeholder={translate(
                                  template[v] === 'id' ? 'generadorApp.' + entity + '.field_id' : 'generadorApp.' + entity + '.' + template[v]
                                )}
                              />
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {this.state.listCheckedModalSuperEntities &&
                          this.state.listCheckedModalSuperEntities.data.map((ent, i) => (
                            <tr key={i}>
                              <td className={'align-middle text-center'}>
                                <input
                                  type={multiple ? 'checkbox' : 'radio'}
                                  checked={
                                    multiple
                                      ? this.state.listCheckedModalSuperSelectID.map(v => v['value'] + '').includes(ent['id'] + '')
                                      : this.state.listCheckedModalSuperSelectID['value'] + '' === ent['id'] + ''
                                  }
                                  onChange={() =>
                                    this.handleInputModalSuperSelectChange(
                                      {
                                        ...ent,
                                        value: ent['id'],
                                        label: showFields
                                          .map(field => getValueRecursive(ent, field.split('.')))
                                          .filter(field => field)
                                          .join(' | '),
                                      },
                                      multiple
                                    )
                                  }
                                />
                              </td>
                              {template &&
                                template.map((field, j) => {
                                  if (!field.includes('.')) {
                                    return <td key={'list-' + entity + '-' + field}>{ent[field]}</td>;
                                  } else {
                                    let valAux = ent;
                                    field.split('.').map(subField => {
                                      if (Array.isArray(valAux)) {
                                        valAux = valAux
                                          .map(arrField => (arrField[subField] ? arrField[subField] : false))
                                          .filter(filt => filt !== false)
                                          .join(' | ');
                                      } else {
                                        valAux = valAux[subField] ? valAux[subField] : '';
                                      }
                                    });
                                    return <td key={'list-' + entity + '-' + field}>{valAux}</td>;
                                  }
                                })}
                            </tr>
                          ))}
                      </tbody>
                    </Table>
                  </div>
                </ModalBody>
                <ModalFooter>
                  <Button
                    color="secondary"
                    onClick={() =>
                      this.setState({ listCheckedModalSuperSelectID: [], listCheckedModalSuperSelectFilters: {}, modalSuperSelect: '' })
                    }
                  >
                    <FontAwesomeIcon icon="ban" />
                    &nbsp;
                    <Translate contentKey={'generadorApp.' + entity + '.btnCancel'}>Cancel</Translate>
                  </Button>
                  <Button
                    id={'jhi-confirm-delete-' + entity}
                    color="primary"
                    onClick={() => {
                      const newState = {
                        listCheckedModalSuperSelectID: [],
                        listCheckedModalSuperSelectFilters: {},
                        modalSuperSelect: '',
                      };
                      newState[stateField] = this.state.listCheckedModalSuperSelectID;
                      this.setState(newState);
                    }}
                  >
                    <FontAwesomeIcon icon="filter" />
                    &nbsp;
                    <Translate contentKey={'generadorApp.' + entity + '.btnFilter'}>Filter</Translate>
                  </Button>
                </ModalFooter>
              </Modal>
            ) : (
              <> </>
            )}
          </>
        );
      }

      


      componentDidMount() {
      <%_ if (pagination === 'infinite-scroll') { _%>
      if (!this.state.isNew) {
      this.props.getEntity(this.props.match.params['id']);
      }
      <%_ } else if (hasOneToOneNotOwner) { %> 
        this.props.getEntity(parseInt(this.props.match.params['id<%= _.upperFirst(baseFilters) _%>'], 10));
      <%_ } else { %>
      if (this.state.isNew) {
      this.props.reset();
      <%_ if (formLayout.length > 0) {  _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
          <%_ const embebedEntity = formLayout[idx].entity; _%>
            this.<%= embebedEntity.relationshipName %>Reset();
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
      } else {
      this.props.getEntity(this.props.match.params['id']);
      }
      <%_ } _%>
      }

      <%_ if (fieldsContainBlob) {_%>
      onBlobChange = (isAnImage, name, fileInput) => event => {
        const fileName = event.target.files[0].name;
        setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType, fileName), isAnImage);
      };

      clearBlob = name => () => {
      this.props.setBlob(name, undefined, undefined);
      };
      <%_ } _%>
      getFiltersURL = (offset = null) => {
        const fieldsBase = this.state.fieldsBase;
        let url = (offset !== null ? '&offset=' + offset : '');
        Object.keys(fieldsBase).map((key)=>{
          url += key !== 'offset' ? ('&' + key + '=' + fieldsBase[key]) : '';
        }); 
        return url;
      };
      saveEntity = (event: any, errors: any, values: any) => {
        <%_ if (hasOneToOneNotOwner) { %>errors = errors.filter(v=>v!=="id");<%_ } %>
      <%_ for (idx in fields) {
        const fieldType = fields[idx].fieldType;
        const fieldName = fields[idx].fieldName;
    _%>
      <%_ if (fieldType === 'Instant' || fieldType === 'ZonedDateTime')  { _%>
      values.<%=fieldName%> = convertDateTimeToServer(values.<%= fieldName %>);
      <%_ } _%>
      <%_ } _%>

      <%_ for (idx in fields) { _%> 
        <% const rulesValidate = fields[idx].fieldValidateRules ? fields[idx].fieldValidateRules : ""; _%>
        <%_ if(rulesValidate.includes('required') && fields[idx].formLayoutCepBr ){ %> 
          if (!this.state.cepRequest<%- fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>) {
            errors.push(translate('entity.validation.required'));
          }
        <%_ } _%>
      <%_ } _%>

      if (errors.length === 0) {
      const { <%= entityInstance %>Entity } = this.props;
      const entity = {
      ...<%= entityInstance %>Entity,
      ...values,<%_ if (hasOneToOneNotOwner) { %> id:  parseInt(this.state.fieldsBase.<%= baseFilters %>Id, 10), <%_ } %>
      <% relationships.forEach(rel => { %>
        <%_  if(rel['formLayoutEmbebed'] !== "true"){ _%>
          <%_ if (rel.relationshipType === 'many-to-many') { %><%= rel.relationshipFieldNamePlural %>: getFormFromSelect(this.state.<%= rel.relationshipFieldName %>SelectValue, '<%= rel.relationshipType %>'),   // <%= rel.relationshipType %> - <%= rel.ownerSide ? 'ownerSide' : 'otherSide' %>
          <%_ } else { %><%= rel.relationshipFieldName %>: getFormFromSelect(this.state.<%= rel.relationshipFieldName %>SelectValue, '<%= rel.relationshipType %>'),  // <%= rel.relationshipType %> - <%= rel.ownerSide ? 'ownerSide' : 'otherSide' %>
          <%_ } %>
        <% } else { %>
          <%= rel.relationshipType === 'many-to-many' ? rel.relationshipFieldNamePlural : rel.relationshipFieldName %> : undefined, 
        <% } %>
      <% }) %>
      <%_ for (idx in fields) { _%>
        <%_ if(fields[idx].formLayoutCepBr) { _%>
            <%= fields[idx].fieldName %>:  this.state.cepRequest<%= fields[idx].formLayoutCepBr.slice(0, 1).toUpperCase() + fields[idx].formLayoutCepBr.slice(1).toLowerCase() %>,
        <%_ } else { _%>
          <%_ if (fields[idx].fieldType === 'Boolean') { _%>
              <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue === null ? false : this.state.<%= fields[idx].fieldName %>SelectValue,
          <%_ } else if (fields[idx].fieldIsEnum === true) {
                const values =  fields[idx].fieldValues.replace(/\s/g, '').split(',');  _%>
            <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue === null ? "<%= values[0] %>" : this.state.<%= fields[idx].fieldName %>SelectValue,
          <%_ } else { _%>
              <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue,
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>
      }

      const {
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
              <%= listFilterLayout[idx].entity.relationshipName %>Id,
            <%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                <%= listFilterLayout[idx].name %>Start,
                <%= listFilterLayout[idx].name %>End,
                <%_ } else { _%>
                  <%= listFilterLayout[idx].name %>,
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%>
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
              <%= fields[idx].fieldName %>Start, 
              <%= fields[idx].fieldName %>End, 
            <%_ } else { _%>
              <%= fields[idx].fieldName %>, 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>Id, <%_ }) _%>
        <%_ } _%>
        activePage, itemsPerPage, sort, order 
      } = this.state.fieldsBase;

     <%_ if (formLayout.length > 0) {  _%>
      <%_ for (idx in formLayout) {  _%>
        <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
        <%_ const embebedEntity = formLayout[idx].entity; _%>
         const <%= embebedEntity.relationshipName %>ListAllEmbed = this.props.<%= embebedEntity.relationshipName %>ListAllEmbed;
        <%_ } _%>
      <%_ } _%>
    <%_ } _%>

      if (this.state.isNew) {
        new Promise(resolve => {
          resolve(this.props.createEntity(entity, [
            <%_ if (listFilterLayout.length > 0) {  _%>
              <%_ for (idx in listFilterLayout) { _%>
                <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>getFilterFromSelect(<%= listFilterLayout[idx].entity.relationshipName %>Id, '<%= listFilterLayout[idx].entity.relationshipType %>'),<%_ } else { _%>
                  <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                    <%= listFilterLayout[idx].entity.fieldName %>Start, 
                    <%= listFilterLayout[idx].entity.fieldName %>End, 
                  <%_ } else { _%> 
                    <%= listFilterLayout[idx].entity.fieldName %>,
                  <%_ } _%>
                <%_ } _%>
              <%_ } _%>
            <%_ } else {  _%>
              <%_ for (idx in fields) { _%> 
                <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
                  <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
                <%_ } else { _%> 
                  <%= fields[idx].fieldName %>, 
                <%_ } _%>
              <%_ } _%>
              <%_ relationships.forEach(rel => { _%>getFilterFromSelect(<%= rel.relationshipName %>Id, '<%= rel.relationshipType %>'),<%_ }) _%>
            <%_ } _%>
          ]) 
        );
      }).then(resultEntity => {
   

        const idEntity = resultEntity && resultEntity['value'] && resultEntity['value']['data'] && resultEntity['value']['data']['id'] ? resultEntity['value']['data']['id'] : -1;
        <%_ if (formLayout.length > 0) {  _%>
          <%_ for (idx in formLayout) {  _%>
            <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
            <%_ const embebedEntity = formLayout[idx].entity; _%>
                if(idEntity){
                  <%= embebedEntity.relationshipName %>ListAllEmbed.map((v)=>{
                    v['id'] = null;
                    v['<%= entityInstance %>'] = {id:idEntity};
                      this.props['createEntity<%= embebedEntity.relationshipNameCapitalized %>'](v);
                  });
                }
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>
      });
      } else {
      this.props.updateEntity(entity, [
        <%_ if (listFilterLayout.length > 0) {  _%>
          <%_ for (idx in listFilterLayout) { _%>
            <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>getFilterFromSelect(<%= listFilterLayout[idx].entity.relationshipName %>Id, '<%= listFilterLayout[idx].entity.relationshipType %>'),<%_ } else { _%>
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>Start, 
                <%= listFilterLayout[idx].entity.fieldName %>End, 
              <%_ } else { _%> 
                <%= listFilterLayout[idx].entity.fieldName %>,
              <%_ } _%>
            <%_ } _%>
          <%_ } _%>
        <%_ } else {  _%>
          <%_ for (idx in fields) { _%> 
            <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
              <%= fields[idx].fieldName %>Start, <%= fields[idx].fieldName %>End, 
            <%_ } else { _%> 
              <%= fields[idx].fieldName %>, 
            <%_ } _%>
          <%_ } _%>
          <%_ relationships.forEach(rel => { _%>getFilterFromSelect(<%= rel.relationshipName %>Id, '<%= rel.relationshipType %>'),<%_ }) _%>
        <%_ } _%>
        ]);
      }
      }
      }

      handleClose = () => {
      this.props.history.push(<%_ if (typeof baseFilters !== 'undefined' && baseFilters) { 
        _%> "/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters %>Id + <%_ 
      } %>"/<%= entityFileName %>?"+this.getFiltersURL());
      }


      
  getFullEntityFromState(v) {
    <% relationships.forEach(rel => { %><% if(rel.relationshipType === 'many-to-many') { %> 
      const <%= rel.relationshipFieldName %>Entity = this.props.<%= rel.otherEntityNamePlural %>.filter(x=> x.<%= rel.otherEntityRelationshipNamePlural %> &&  x.<%= rel.otherEntityRelationshipNamePlural %>.map(x1=>x1.id).includes(this.state.<%= rel.relationshipFieldName %>SelectValue)); // <%= rel.relationshipType %> <% 
    } else if(rel.relationshipType === 'many-to-one') { %> 
      const <%= rel.relationshipFieldName %>Entity = this.props.<%= rel.otherEntityNamePlural %>.filter(x=> x.<%= rel.otherEntityRelationshipName %> &&  x.<%= rel.otherEntityRelationshipName %>.map(x1=>x1.id).includes(this.state.<%= rel.relationshipFieldName %>SelectValue)); // <%= rel.relationshipType %> <% 
    } else { %> 
      const <%= rel.relationshipFieldName %>Entity = this.props.<%= rel.otherEntityNamePlural %>.filter(x => x.<%= rel.otherEntityRelationshipName %> && x.<%= rel.otherEntityRelationshipName %>.id === this.state.<%= rel.relationshipFieldName %>SelectValue).pop(); // <%= rel.relationshipType %> <% 
  } %><% }) %>
    return { 
      <%_ for (idx in fields) { _%>   
        <%= fields[idx].fieldName %>: this.state.<%= fields[idx].fieldName %>SelectValue,
      <%_ } _%>
      <% relationships.forEach(rel => { 
        %> <%= rel.relationshipFieldName %>: <%= rel.relationshipFieldName %>Entity, 
      <% }) %>
    };
  }; 
  getFullEntitySelectValue(v) {
    <% relationships.forEach(rel => { %>
      <% if(rel.relationshipType === 'many-to-many') { %> 
        const <%= rel.relationshipFieldName %>Entity = this.props.<%= rel.otherEntityNamePlural %>.filter(x=> x.<%= rel.otherEntityRelationshipNamePlural %>.map(x1=>x1.id).includes(v.id)).pop(); 
      <% } else if(rel.relationshipType === 'many-to-many') { %> 
        const <%= rel.relationshipFieldName %>Entity = this.props.<%= rel.otherEntityName %>.filter(x=> x.<%= rel.otherEntityRelationshipNamePlural %>.map(x1=>x1.id).includes(v.id)).pop(); 
      <% } else { %> 
        const <%= rel.relationshipFieldName %>Entity = v.<%= rel.otherEntityName %>; 
      <% } %>
    <% }) %>
    return { 
      <%_ for (idx in fields) { _%>   
        <%= fields[idx].fieldName %>SelectValue: v.<%= fields[idx].fieldName %>,
      <%_ } _%>
      <% relationships.forEach(rel => { 
        %> <%= rel.relationshipFieldName %>SelectValue: <%= rel.relationshipFieldName %>Entity ? <%= rel.relationshipFieldName %>Entity['id'] : null, 
      <% }) %>
    };
  };

      renderHeader() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;
      
      return (
        <> 
        <div id="page-heading">
          <span className="page-header ml-3">
              {this.state.isNew ? (
                <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">Create a <%= entityClass %></Translate>
              ) : (
                <Translate contentKey="<%= i18nKeyPrefix %>.home.editLabel">Edit a <%= entityClass %></Translate>
              )}
            
          </span>


          <Button color="primary" id="save-entity" type="submit" disabled={updating}
            className="float-right jh-create-entity">
            <FontAwesomeIcon icon="save" />&nbsp;
            <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
          </Button>


          {!this.state.isNew ? ( <>
          <Button color="primary" id="next-entity" disabled={updating} onClick={async ()=>{
            const myresult = await this.props.getEntityOffset(
              <%_ if (listFilterLayout.length > 0) {  _%>
                <%_ for (idx in listFilterLayout) { _%>
                  <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
                    this.state.fieldsBase.<%= listFilterLayout[idx].entity.relationshipName %>Id,
                  <%_ } else { _%>
                    <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                      this.state.fieldsBase.<%= listFilterLayout[idx].entity.fieldName %>Start, 
                      this.state.fieldsBase.<%= listFilterLayout[idx].entity.fieldName %>End, 
                    <%_ } else { _%> 
                      this.state.fieldsBase.<%= listFilterLayout[idx].entity.fieldName %>,
                    <%_ } _%>
                  <%_ } _%>
                <%_ } _%>
              <%_ } else {  _%>
                <%_ for (idx in fields) { _%> 
                  <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
                    this.state.fieldsBase.<%= fields[idx].fieldName %>Start, this.state.fieldsBase.<%= fields[idx].fieldName %>End, 
                  <%_ } else { _%> 
                    this.state.fieldsBase.<%= fields[idx].fieldName %>, 
                  <%_ } _%>
                <%_ } _%>
                <%_ relationships.forEach(rel => { _%>this.state.fieldsBase.<%= rel.relationshipName %>Id, <%_ }) _%>
              <%_ } _%>
              (this.state.fieldsBase.offset*1)+1,
              this.state.fieldsBase.sort + ","+this.state.fieldsBase.order
            );
            if(myresult.value.data && myresult.value.data.length > 0){
              this.setState({
                fieldsBase:{...this.state.fieldsBase, offset: (this.state.fieldsBase.offset*1)+1}
              });
              this.props.history.push('/<%= entityFileName %>/'+myresult.value.data[0]['id']+'/edit?' + this.getFiltersURL((this.state.fieldsBase.offset*1)+1));
            }else{
              toast.error(translate('generadorApp.last.item', {fieldName: translate('<%= i18nKeyPrefix %>.detail.title')})); 
            }
          }} className="float-right jh-create-entity">
            {'>>'}
          </Button>

          <Button color="primary" id="prev-entity" onClick={async ()=>{
            const myresult = await this.props.getEntityOffset(
                <%_ if (listFilterLayout.length > 0) {  _%>
                  <%_ for (idx in listFilterLayout) { _%>
                    <%_ if (listFilterLayout[idx].type === 'relationship' ) {  _%>
                      this.state.fieldsBase.<%= listFilterLayout[idx].entity.relationshipName %>Id,
                    <%_ } else { _%>
                      <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(listFilterLayout[idx].entity.fieldType)) { _%> 
                        this.state.fieldsBase.<%= listFilterLayout[idx].entity.fieldName %>Start, 
                        this.state.fieldsBase.<%= listFilterLayout[idx].entity.fieldName %>End, 
                      <%_ } else { _%> 
                        this.state.fieldsBase.<%= listFilterLayout[idx].entity.fieldName %>,
                      <%_ } _%>
                    <%_ } _%>
                  <%_ } _%>
                <%_ } else {  _%>
                  <%_ for (idx in fields) { _%> 
                    <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)) { _%> 
                      this.state.fieldsBase.<%= fields[idx].fieldName %>Start, this.state.fieldsBase.<%= fields[idx].fieldName %>End, 
                    <%_ } else { _%> 
                      this.state.fieldsBase.<%= fields[idx].fieldName %>, 
                    <%_ } _%>
                  <%_ } _%>
                  <%_ relationships.forEach(rel => { _%>this.state.fieldsBase.<%= rel.relationshipName %>Id, <%_ }) _%>
                <%_ } _%>
              (this.state.fieldsBase.offset*1)-1,
              this.state.fieldsBase.sort + ","+this.state.fieldsBase.order
            );
            if(myresult.value.data && myresult.value.data.length > 0){
              this.setState({
                fieldsBase:{...this.state.fieldsBase, offset: (this.state.fieldsBase.offset*1)-1}
              });
              this.props.history.push('/<%= entityFileName %>/'+myresult.value.data[0]['id']+'/edit?' + this.getFiltersURL((this.state.fieldsBase.offset*1)-1));
            }else{
              toast.error(translate('generadorApp.first.item', {fieldName: translate('<%= i18nKeyPrefix %>.detail.title')})); 
            }
          }} disabled={updating} className="float-right jh-create-entity">
              {'<<'}
          </Button> 
          </>
          ) : <> </> }



          <Button tag={Link} id="cancel-save" to={<%_ if (typeof baseFilters !== 'undefined' && baseFilters) { 
            _%> "/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters %>Id + <%_ 
          } %>"/<%= entityFileName %>?"+this.getFiltersURL()} replace color="info"
            className="float-right jh-create-entity">
            <FontAwesomeIcon icon="arrow-left" />&nbsp;
            <span className="d-none d-md-inline">
                <Translate contentKey="<%= i18nKeyPrefix %>.btnBack">Back</Translate>
            </span>
          </Button>
        </div>
      <ol className="breadcrumb">
        <li className="breadcrumb-item">
          <Link to="/">Inicio</Link>
        </li>
        <%_ if((typeof baseFilters !== 'undefined' && baseFilters)) { _%>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>"}><%= _.startCase((baseFilters+"s")) %></Link></li>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + this.state.fieldsBase.<%= baseFilters _%>Id ? this.state.fieldsBase.<%= baseFilters _%>Id.value : ""}>{
            this.state.fieldsBase.<%= baseFilters _%>Id ? this.state.fieldsBase.<%= baseFilters _%>Id.label : "" 
          }</Link></li>
          <li className="breadcrumb-item"><Link to={"/<%= baseFilters %>/" + (this.state.fieldsBase.<%= baseFilters _%>Id ? this.state.fieldsBase.<%= baseFilters _%>Id.label : "") + "/<%= entityFileName %>"}>
            <%= entityClassPluralHumanized %>
          </Link></li>
        <%_ } else { _%>
          <li className="breadcrumb-item active"><Link to={"/<%= entityFileName %>"}>
            <Translate contentKey="<%= i18nKeyPrefix %>.home.title"><%= entityClassPluralHumanized %></Translate>
          </Link></li>
        <%_ } _%>
        <li className="breadcrumb-item active">
          <Translate contentKey="<%= i18nKeyPrefix %>.detail.title"><%= entityClassHumanized %> edit</Translate>
        </li>
      </ol>
      
      <%_ if (formTabs.length > 0) { _%>
        { !isNew ? <Nav tabs>
          <%_ for (idx in formTabs) { _%>
          <NavItem>
            <NavLink className={classnames({ active: this.state.activeTab===<%= idx %> })} onClick={()=> {
              this.tabsNext(<%= idx %>); }}
              >
              <span className="d-sm-none"><Translate contentKey="<%= i18nKeyPrefix %>.<%= formTabs[idx] %>"><%= formTabs[idx] %></Translate></span>
              <span className="d-sm-block d-none"><Translate contentKey="<%= i18nKeyPrefix %>.<%= formTabs[idx] %>"><%= formTabs[idx] %></Translate></span>
            </NavLink>
          </NavItem>
          <%_ } _%>
          <%_ if(defaultFormTab) { _%>
          <NavItem>
            <NavLink className={classnames({ active: this.state.activeTab===<%= formTabs.length %> })}
              onClick={()=> { this.tabsNext(<%= formTabs.length %>); }}
              >
              <span className="d-sm-none">Default</span>
              <span className="d-sm-block d-none">Default</span>
            </NavLink>
          </NavItem>
          <%_ } _%>
        </Nav> : null }

        <%_ } _%>
        </>
      )
      }
      renderBody() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;
      
      const fullEntityEmbebed = this.getFullEntityFromState(<%= entityInstance %>Entity);

      <%_ if (formLayout.length > 0) {  _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
          <%_ const embebedEntity = formLayout[idx].entity; _%>
            const mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>List: any = {};
            Object.keys(mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>).map(v => {mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>List[v] = () => {
              if(!this.state.functionEmbebed.includes(v + '<%= embebedEntity.relationshipNameCapitalized %>')){
                this.setState({functionEmbebed: [...this.state.functionEmbebed, v + '<%= embebedEntity.relationshipNameCapitalized %>']},this.props[v + '<%= embebedEntity.relationshipNameCapitalized %>']);
              }
            } });
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>

      
      return (
        <> 
    
        <Row className="justify-content-center">
          <Col md="11">
          { loading ? <p>Loading...</p> :
          <div>
            { !isNew ?
            <AvGroup>
              <Row>
                {/*
                <Col md="3">
                <Label className="mt-2" for="<%= entityFileName %>-id">
                  <Translate contentKey="<%= i18nKeyPrefix %>.field_id">ID</Translate>
                </Label>
                </Col> */}
                <Col md="12">
                  <AvInput id="<%= entityFileName %>-id" type="hidden" className="form-control" name="id" required readOnly />
                </Col>
              </Row>
            </AvGroup> 
            : null
            }
            <%_ if (formTabs.length === 0) { _%>
              <Row>
                  <%_ if (formLayout.length > 0) {  _%>
                      <%_ for (idx in formLayout) {  _%>
                        <%_ if(formLayout[idx].type == 'field'){ _%>
                            <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                        <%_  } else if(formLayout[idx].type == 'relationship') { _%>
                          <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                        <%_ } else { _%>
                          <Col md="<%= formLayout[idx].formLayoutSize ? formLayout[idx].formLayoutSize : "12" %>">
                            <<%- formLayout[idx].name %> baseState={this.state} />
                          </Col>
                        <%_ }_%>
                      <%_ } _%>
                  <%_ } else { _%>
                      <%_ for (idx in fields) { _%> 
                          <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                      <%_ } _%>
                      <%_ relationships.forEach(rel => { _%> 
                          <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                      <%_ }) _%>
                  <%_ } _%>
              </Row>
            <%_ } else { _%>
            <TabContent activeTab={this.state.activeTab}>
              <%_ for (iTabs in formTabs) { _%>
                <TabPane tabId={<%= iTabs %>}>
                    { isNew ?
                    <Row className="justify-content-center mb-3">
                      <Col md="12">
                      <h2 id="<%= i18nKeyPrefix %>.home.formTabs_<%= idx %>">
                        <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.<%= formTabs[iTabs] %>">
                          <%= formTabs[iTabs] %>
                        </Translate>                        
                      </h2>
                      </Col>
                    </Row> : null }

                    <Row>
                      <%_ if (formLayout.length > 0) {  _%>
                            <%_ for (idx in formLayout) { _%>
                              <%_ if(formTabs[iTabs] === formLayout[idx].entity['formTab']) { _%>
                                <%_ if(formLayout[idx].type == 'field'){_%>
                                  <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                                <%_  } else if(formLayout[idx].type == 'relationship') { _%>
                                  <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                                <%_ } else {_%>
                                  <Col md="<%= formLayout[idx].formLayoutSize ? formLayout[idx].formLayoutSize : "12" %>">
                                    <<%- formLayout[idx].name %> baseState={this.state} />
                                  </Col>
                                <%_ }_%>
                              <%_ } _%>
                            <%_ } _%>
                      <%_ } else { _%>
                            <%_ for (idx in fields) { _%>
                              <%_ if(formTabs[iTabs] === fields[idx]['formTab']) { _%>
                                    <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                              <%_ } _%>
                            <%_ } _%>
                            <%_ relationships.forEach(rel => { _%>
                              <%_ if(formTabs[iTabs] === rel['formTab']) {  _%>
                                <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                              <%_ } _%>
                            <%_ }) _%>
                      <%_ } _%>
                    </Row> 

                    <%_ if(Number.parseInt(iTabs, 10) + 1 < formTabs.length + (defaultFormTab ? 1 : 0)  ) { _%>
                    { isNew ?
                    <Button color="primary" className={"float-right jh-create-entity"} onClick={()=> {
                      this.tabsNext(<%= Number.parseInt(iTabs, 10) + 1 %>, <%= Number.parseInt(iTabs, 10) %>); }}
                      >
                      <span className="d-sm-none">
                        <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>">
                          <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                        </Translate>
                      </span>
                      <span className="d-sm-block d-none">
                        <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>">
                          <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                        </Translate>
                        &nbsp;
                        <FontAwesomeIcon icon="arrow-right" />
                      </span>
                    </Button>
                    : null }
                    <%_ } else { _%>
                    { isNew ?
                    <Button color="primary" id="save-entity" type="submit" disabled={updating}
                      className="btn btn-primary float-right jh-create-entity">
                      <FontAwesomeIcon icon="save" />&nbsp;
                      <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
                    </Button>
                    : null }
                    <%_ } _%>

                    <%_ if(iTabs > 0 ) { _%>
                    { isNew ?
                    <Button color="info" className={"float-right jh-create-entity"} onClick={()=> {
                      this.tabsNext(<%= Number.parseInt(iTabs, 10) - 1 %>); }}
                      >

                      <span className="d-sm-none"> 
                        <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) - 1] %>">
                          <%= formTabs[Number.parseInt(iTabs, 10) - 1] %> 
                        </Translate>
                      </span>
                      <span className="d-sm-block d-none">
                        <FontAwesomeIcon icon="arrow-left" />&nbsp;
                        <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[Number.parseInt(iTabs, 10) - 1] %>">
                          <%= formTabs[Number.parseInt(iTabs, 10) - 1] %>
                        </Translate>
                      </span>
                    </Button>
                    : null }
                    <%_ } _%>
                  </TabPane>
              <%_ } _%>
              <%_ if(defaultFormTab) { _%>
              <TabPane tabId={<%= formTabs.length %>}>
                { isNew ?
                <Row className="justify-content-center mb-3">
                  <Col md="12">
                  <h2 id="<%= i18nKeyPrefix %>.home.formTabs_default">
                    <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.Default">
                      Default
                    </Translate>
                  </h2>
                  </Col>
                </Row> : null }

                <%_ if (formLayout.length > 0) {  _%>
                        <%_ for (idx in formLayout) {  _%>
                          <%_ if(!formLayout[idx].entity['formTab'] || formLayout[idx].entity['formTab'] === "default") {  _%>
                            <%_ if(formLayout[idx].type == 'field'){ _%>
                              <%- include('printFields/printFieldsInputs', {field: formLayout[idx].entity}); -%>
                            <%_  } else if(formLayout[idx].type == 'relationship') { _%>
                              <%- include('printFields/printRelationshipsInputs', {rel: formLayout[idx].entity}); -%>
                            <%_ } else { _%>
                              <Col md="<%= formLayout[idx].formLayoutSize ? formLayout[idx].formLayoutSize : "12" %>">
                                <<%- formLayout[idx].name %> baseState={this.state} />
                              </Col>
                            <%_ } _%>
                          <%_ }  _%>
                        <%_ } _%>
                <%_ } else { _%>
                  <%_ for (idx in fields) { _%> 
                    <%_ if(!fields[idx]['formTab'] || fields[idx]['formTab'] === "default") {  _%>
                      <%- include('printFields/printFieldsInputs', {field: fields[idx]}); -%>
                    <%_ } _%>
                  <%_ } _%>
                  <%_ relationships.forEach(rel => { _%> 
                    <%_ if(!rel['formTab'] || rel['formTab'] === "default") {  _%>
                      <%- include('printFields/printRelationshipsInputs', {rel: rel}); -%>
                    <%_ } _%>
                  <%_  }) _%>
                <%_ } _%>


                { isNew ?
                <Button color="primary" id="save-entity" type="submit" disabled={updating}
                  className="btn btn-primary float-right jh-create-entity">
                  <FontAwesomeIcon icon="save" />&nbsp;
                  <Translate contentKey="<%= i18nKeyPrefix %>.btnSave">Save</Translate>
                </Button>
                : null }

                <%_ if(formTabs.length > 0 ) { _%>
                { isNew ?
                <Button color="info" className={"float-right jh-create-entity "}
                               onClick={() => { this.tabsNext(<%= formTabs.length -1 %>); }}
                               >
                  <span className=" d-sm-none"> 
                    <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[formTabs.length - 1] %>">
                      <%= formTabs[formTabs.length - 1] %>
                    </Translate>
                  </span>
                  <span className="d-sm-block d-none">
                    <FontAwesomeIcon icon="arrow-left" />&nbsp;
                    <Translate contentKey="<%= i18nKeyPrefix %>.formTabs.btn<%= formTabs[formTabs.length - 1] %>">
                      <%= formTabs[formTabs.length - 1] %>
                    </Translate>
                  </span>
                </Button>
                : null }
                <%_ } _%>

              </TabPane>
              <%_ } _%>

            </TabContent>
            <%_ } _%>

          </div>

          }
          </Col>
        </Row>

        </>
      )
      }

      render() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;
      
      return (
        <div>
            <AvForm model={isNew ? {
              <%_ for (idx in fields) { _%>
                <%_ if (typeof fields[idx].formLayoutDefault !== "undefined") { _%>
                  <%= fields[idx].fieldName %>: <%- fields[idx].formLayoutDefault %>,
                <%_ } _%>
              <%_ } _%>
            } : {
              ...<%= entityInstance %>Entity, 
              <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
            } } onSubmit={this.saveEntity}>
          <Panel  className="<%= entityFileName %> <%= entityFileName %>-update"  <%_ if(baseFiltersModal) { %> isOpen <%_ } %>>
            <PanelHeader>
              { this.renderHeader() }
            </PanelHeader>
            <PanelBody>
              { this.renderBody() }
            </PanelBody>
          </Panel>
        </AvForm>
      </div>
      );
      }
      }

      export  const mapStateToProps = (storeState: IRootState) => { return {
      <%_ otherEntityActions.forEach(val => { _%>
      <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
      <%_ }) _%>
      <%= entityInstance %>Entity: storeState.<%= entityInstance %>.entity,
      loading: storeState.<%= entityInstance %>.loading,
      updating: storeState.<%= entityInstance %>.updating,
      updateSuccess: storeState.<%= entityInstance %>.updateSuccess,

      <%_ if (formLayout.length > 0) {  _%>

        <%_ let firstEmbedRel = true; _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
            <%_ const embebedEntity = formLayout[idx].entity; _%>
            <%_ if (firstEmbedRel) { _%>
              <%= entityInstance %>s: storeState.<%= entityInstance %>.entities,
              <%_ firstEmbedRel = false; _%>
            <%_ } _%>
            <%= embebedEntity.relationshipName %>ListAllEmbed: storeState.<%= entityInstance %>.<%= embebedEntity.relationshipName %>ListAllEmbed,
            <%= embebedEntity.relationshipName %>ListEmbed: storeState.<%= entityInstance %>.<%= embebedEntity.relationshipName %>ListEmbed,
            <%= embebedEntity.relationshipName %>Selected: storeState.<%= entityInstance %>.<%= embebedEntity.relationshipName %>Selected,
            mapStateToProps<%= embebedEntity.relationshipNameCapitalized %>: mapStateToProps<%= embebedEntity.relationshipNameCapitalized %>(storeState),

          <%_ } _%>
        <%_ } _%>
      <%_ } _%>

      }};

      <%_ if (formLayout.length > 0) {  _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
            <%_ const embebedEntity = formLayout[idx].entity; _%>
            const mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>List = {};
            Object.keys(mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>).map(v => {
              mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>List[v+"<%= embebedEntity.relationshipNameCapitalized %>"] = mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>[v]; 
            });
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>

      export const mapDispatchToProps = {
      getEntity,
      updateEntity,
      <%_ if (fieldsContainBlob) { _%>
      setBlob,
      <%_ } _%>
      createEntity,
      getEntityOffset,
      reset,

      <%_ if (formLayout.length > 0) {  _%>
        <%_ for (idx in formLayout) {  _%>
          <%_  if(formLayout[idx].type === 'relationship' && formLayout[idx].entity['formLayoutEmbebed'] === "true"){ _%>
          <%_ const embebedEntity = formLayout[idx].entity; _%>
          ...mapDispatchToProps<%= embebedEntity.relationshipNameCapitalized %>List,    
            <%= embebedEntity.relationshipName %>UpdateEntity,
            <%= embebedEntity.relationshipName %>GetEntities,
            <%= embebedEntity.relationshipName %>SetEntities,
            <%= embebedEntity.relationshipName %>Reset,
            <%= embebedEntity.relationshipName %>GetEntity,
            <%= embebedEntity.relationshipName %>CreateEntity,
            <%= embebedEntity.relationshipName %>DeleteEntity,
          <%_ } _%>
        <%_ } _%>
      <%_ } _%>


      };

      export type StateProps = ReturnType<typeof mapStateToProps>;
      export type DispatchProps = typeof mapDispatchToProps;

        export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>Update);