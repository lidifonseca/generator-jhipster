<%_ 
    const superSelect = rel['listFilterLayoutSuperSelect'] ? rel.listFilterLayoutSuperSelect : null; 
    const listFilterLayoutLabel = rel.listFilterLayoutLabel ? rel.listFilterLayoutLabel : 'left' ; 
    const listFilterLayoutSize = rel.listFilterLayoutSize ? rel.listFilterLayoutSize : 3; 
    const relationshipType = rel.relationshipType;
    const ownerSide = rel.ownerSide;
    const otherEntityName = rel.otherEntityName;
    const otherEntityNamePlural = rel.otherEntityNamePlural;
    const otherEntityNameCapitalized = rel.otherEntityNameCapitalized;
    const relationshipName = rel.relationshipName;
    const relationshipNameHumanized = rel.relationshipNameHumanized;
    const relationshipFieldName = rel.relationshipFieldName;
    const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
    const otherEntityField = rel.otherEntityField;
    const otherEntityFieldCapitalized = rel.otherEntityFieldCapitalized;
    const relationshipRequired = rel.relationshipRequired;
    const translationKey = `${i18nKeyPrefix}.${relationshipName}`;
    const otherEntityApiLink = rel.otherEntityNamePlural.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);
    const showFields = rel['formFilterShowFields'] ? rel.formFilterShowFields : (rel.otherEntityField ? rel.otherEntityField : 'id'); 
    _%>

    { this.state.baseFilters !== '<%= relationshipFieldName %>' ? 
      <Col md="<%= listFilterLayoutSize %>">
        <Row className="mr-1 mt-1">
          <div style={{width: '100%'}}>
            <Label for="<%= entityFileName %>-<%= relationshipName %>">
              <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
            </Label>
            <SelectAsync 
              id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"} name={"<%= relationshipFieldName %>"} cacheOptions  
              value={this.state.<%= relationshipName %>Id} onChange={(options) => this.setState({ <%= relationshipName %>Id: options })}
              defaultOptions={this.state.<%= relationshipName %>StartFilter ? this.state.<%= relationshipName %>StartFilter : []}
              loadingMessage={(input)=>(translate("selectAsync.loadingMessage"))}
              noOptionsMessage={(input)=>this.state.<%= relationshipName %>StartFilter === undefined ? translate("selectAsync.loadingMessage") : translate("selectAsync.noOptionsMessage")}
              onMenuOpen={async ()=>{ 
                if(this.state.<%= relationshipName %>StartFilter === undefined){
                  const result = await getListAxios('<%= otherEntityApiLink %>', {}, 0, 100, '<%= showFields.split(";").length > 0 ? showFields.split(";")[0] : 'id' _%>,asc');
                  this.setState({<%= relationshipName %>StartFilter: result.data ? result.data.map(p=>({...p, value: p.id, label: showFieldsSelectAsync(p, '<%= showFields %>') })) : []  })
                }
              }} 
              loadOptions={async (inputValue, callback) => {
                const result = await getListAxios('<%= otherEntityApiLink %>', {'<%= showFields.split(";").slice(0,1) %>.contains': inputValue}, 0, 100, '<%= showFields.split(";").length > 0 ? showFields.split(";")[0] : 'id' _%>,asc');
                callback(
                  result.data ? result.data.map(p=>({...p, value: p.id, label: showFieldsSelectAsync(p, '<%= showFields %>')})) : []
                );
              }}
            />
            <%_ if (superSelect){ _%>
              { this.renderModalSuperSelect(
                '<%= relationshipFieldName %>',
                '<%= otherEntityApiLink %>',
                '<%= superSelect %>'.split(';'),
                '<%= relationshipName  %>Id', 
                true, 
                '<%= showFields %>'.split(';'),
                '<%= showFields.split(";").length > 0 ? showFields.split(";")[0] : 'id' _%>,asc',
                {}
                ) } 
            <%_ } _%>
          </div>
        </Row>
      </Col> 
    : null }
