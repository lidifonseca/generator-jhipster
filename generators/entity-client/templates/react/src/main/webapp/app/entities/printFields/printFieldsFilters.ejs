
<%_ 
  const listFilterLayoutLabel = field.listFilterLayoutLabel ? field.listFilterLayoutLabel : 'left' ; 
  const listFilterLayoutSize = field.listFilterLayoutSize ? field.listFilterLayoutSize : 3; 
  const fieldType = field.fieldType;
  const fieldName = field.fieldName;
  const fieldNameHumanized = field.fieldNameHumanized;
_%>
      
  { this.state.baseFilters !== '<%= fieldName %>' ? 
    <Col md="<%= listFilterLayoutSize %>">
      <Row className="mr-1 mt-1">
        <%_ if (fieldType === 'Boolean') { _%>
          <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
          <Select
            id="<%= entityFileName %>-<%= fieldName %>"
            className={'css-select-control'}
            value={this.state.<%= fieldName %> === 0 ? { value: 0, label: translate("<%= angularAppName %>.<%= fieldType %>_filter_without") } 
              : (this.state.<%= fieldName %> === 1 ? { value: 1, label: translate("<%= angularAppName %>.<%= fieldType %>_filter_with") } 
                : { value: "", label: translate("<%= i18nKeyPrefix %>.<%= fieldName %>_filter_all") } ) } 
            options={[
              { value: "", label: translate("<%= i18nKeyPrefix %>.<%= fieldName %>_filter_all") },
              { value: 1, label: translate("<%= i18nKeyPrefix %>.<%= fieldName %>_filter_with") },
              { value: 0, label: translate("<%= i18nKeyPrefix %>.<%= fieldName %>_filter_without") },
            ]}
            onChange={(options: any) => this.setState({ <%= fieldName %>: options['value'] })}
            name="<%= fieldName %>"
          />
        <%_ } else if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
          <Label id="<%= fieldName %>Start" for="<%= entityFileName %>-<%= fieldName %>_start">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>_start">
              <%= fieldNameHumanized %> (start)
            </Translate>
          </Label>
          <DatePicker
            onChange={value => this.setState({ <%= fieldName %>Start: value })}
            id="<%= fieldName %>Start"
            className="form-control react-datepicker"
            name="<%= fieldName %>Start"
            dateFormat="dd/MM/yyyy"
            selected={this.state.<%= fieldName %>Start ? moment(this.state.<%= fieldName %>Start).toDate() : null}
            locale="pt"
          />
        </Row>
      </Col>
      : null }
      { this.state.baseFilters !== '<%= fieldName %>' ? <Col md="<%= listFilterLayoutSize %>">
        <Row className="mr-1 mt-1">    
          <Label id="<%= fieldName %>End" for="<%= entityFileName %>-<%= fieldName %>_end">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>_end">
              <%= fieldNameHumanized %> (end)
            </Translate>
          </Label>
          <DatePicker
            onChange={value => this.setState({ <%= fieldName %>End: value })}
            id="<%= fieldName %>End"
            className="form-control react-datepicker"
            name="<%= fieldName %>End"
            dateFormat="dd/MM/yyyy"
            selected={this.state.<%= fieldName %>End ? moment(this.state.<%= fieldName %>End).toDate() : null}
            locale="pt"
          />
        <%_ } else if (fieldType === 'LocalDate') { _%>
        <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
          <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
            <%= fieldNameHumanized %>
          </Translate>
        </Label>
        <AvInput type="date" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
        <%_
        } else if (field.fieldIsEnum) {
          const values = field.fieldValues.replace(/\s/g, '').split(',');
        _%>
        <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
          <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
            <%= fieldNameHumanized %>
          </Translate>
        </Label>
        <Select
          id="<%= entityFileName %>-<%= fieldName %>"
          className={'css-select-control'}
          value={this.state.<%= fieldName %> ? { value: this.state.<%= fieldName %>, label: translate("<%= angularAppName %>.<%= fieldType %>."+this.state.<%= fieldName %>) } : { value: "", label: translate("<%= i18nKeyPrefix %>.<%= fieldName %>") } }
          options={[
            { value: "", label: translate("<%= i18nKeyPrefix %>.<%= fieldName %>") },
            <%_ for (key in values) { const value = values[key]; _%>
            { value: "<%= value %>", label: translate("<%= angularAppName %>.<%= fieldType %>.<%= value %>") },
          <%_ } _%>]}
          onChange={(options: any) => this.setState({ <%= fieldName %>: options['value'] })}
          name="<%= fieldName %>"
        />
        <%_ } else if (['Float', 'Double'].includes(fieldType)) { _%>
        <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
          <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
            <%= fieldNameHumanized %>
          </Translate>
        </Label>
        <AvInput type="string" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
        <%_ } else if (['Integer', 'Long'].includes(fieldType)) { _%>
        <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
          <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
            <%= fieldNameHumanized %>
          </Translate>
        </Label>
        <AvInput type="number" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
        <%_ } else if (['byte[]', 'ByteBuffer', 'Blob', 'TextBlob'].includes(fieldType)) { _%>
          <%_ const fieldBlobType = field.fieldTypeBlobContent; _%>
          <%_ if (fieldBlobType !== 'text') {  _%>
              <%_ const isAnImage = fieldBlobType === 'image'; _%>
              <%_ const capitalizedFirstLetter =  _.upperFirst(fieldName); _%>
          <%_ } else { _%>
              <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate>
              </Label>
              <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="textarea" name="<%= fieldName %>" />
          <%_ } _%>
        <%_ } else { _%>
        <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
        <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
          <%= fieldNameHumanized %>
        </Translate>
        </Label>

        <AvInput type="text" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
        <%_ } _%>
        <%_ if (field.clean_javadoc) { _%>
        <UncontrolledTooltip target="<%= fieldName %>Label">
        <%_ if (enableTranslation) { _%>
        <Translate contentKey="<%= i18nKeyPrefix %>.help.<%= fieldName %>"/>
        <%_ } else { _%>
        <%= field.clean_javadoc %>
        <%_ } _%>
        </UncontrolledTooltip>
        <%_ } _%>
      </Row>
    </Col>
  : null }
