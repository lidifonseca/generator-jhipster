/* eslint complexity: ["error", 300] */
import React from 'react';
<%_ if (pagination === 'infinite-scroll')Â { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { connect } from 'react-redux';

<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
  <%_ baseFiltersModal = true; _%>
  import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody, ModalFooter as PanelFooter } from 'reactstrap';
<%_ } else { _%> 
  import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 



<%_ if (typeof addComponenteBeforeListTable != "undefined" &&  addComponenteBeforeListTable != "false"){ _%>
  import <%= entityReactName %>BeforeComponent from '../components/<%= entityFileName %>-before-component';
<%_ } _%>
<%_ if (typeof addComponenteListTable != "undefined" &&  addComponenteListTable != "false"){ _%>
  import <%= entityReactName %>ListComponent from '../components/<%= entityFileName %>-list-component';
<%_ } _%>
<%_ if (typeof addComponenteAfterListTable != "undefined" &&  addComponenteAfterListTable != "false"){ _%>
  import <%= entityReactName %>AfterComponent from '../components/<%= entityFileName %>-after-component';
<%_ } _%>
import { <%= entityReactName %>, mapStateToProps, mapDispatchToProps } from '../<%= entityFileName %>';
import { IRootState } from 'app/shared/reducers';

export interface IExtendedState {
  dumystate?: any;
}
export interface IExtendedProps {
  entityEmbebedPai?: any;
}

  export class <%= entityReactName %>Extended extends <%= entityReactName %> {

  renderHeader() {
    return <> { super.renderHeader() } </>
  }

  renderFilter() {
    return <> { super.renderFilter() } </>
  }

  renderTable() {   
    return <> { super.renderTable() } </>
  }
  

  renderFooter() {
    return <> { super.renderFooter() } </>
  }

  

  render() {
    return <> { super.render() } </>
  }
}

export const mapStateToPropsExtended = (storeState: IRootState) => {
  const listBase = mapStateToProps(storeState);
  return {
    ...listBase, 
  };
};

export const mapDispatchToPropsExtended = {
 ...mapDispatchToProps
};
export type StatePropsExtended = ReturnType<typeof mapStateToPropsExtended >;
  export type DispatchPropsExtended = typeof mapDispatchToPropsExtended;
  
export default connect(mapStateToPropsExtended, mapDispatchToPropsExtended)(<%= entityReactName %>Extended);
