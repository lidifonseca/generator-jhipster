
  <%_ const relationshipType = rel.relationshipType; _%>
  <%_ const ownerSide = rel.ownerSide; _%>
  <%_ const formLayoutLabel = rel.formLayoutLabel ? rel.formLayoutLabel : 'left' ; _%>
  <%_ const formLayoutSize = rel.formLayoutSize ? rel.formLayoutSize : 12; _%>
  <%_ const otherEntityName = rel.otherEntityName; _%>
  <%_ const otherEntityNamePlural = rel.otherEntityNamePlural; _%>
  <%_ const otherEntityNameCapitalized = rel.otherEntityNameCapitalized; _%>
  <%_ const relationshipName = rel.relationshipName; _%>
  <%_ const relationshipNameHumanized = rel.relationshipNameHumanized; _%>
  <%_ const relationshipFieldName = rel.relationshipFieldName; _%>
  <%_ const relationshipFieldNamePlural = rel.relationshipFieldNamePlural; _%>
  <%_ const otherEntityField = rel.otherEntityField; _%>
  <%_ const relationshipRequired = rel.relationshipRequired; _%>
  <%_ const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%> 
  <%_ const superSelect = rel['formLayoutSuperSelect'] ? rel.formLayoutSuperSelect : null; _%>
  <%_ const showFields = rel['formLayoutShowFields'] ? rel.formLayoutShowFields : (rel.otherEntityField ? rel.otherEntityField : 'id') ; _%>

  <%_ const otherEntityApiLink = rel.otherEntityNamePlural.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`); _%>
  <%_ let formLayoutListCondition = typeof rel.formLayoutListCondition !== "undefined" ? rel.formLayoutListCondition.map(v=>"'"+v.split("=")[0]+"': "+v.split("=")[1]).join(", ") : "" _%>
  <%_ formLayoutListCondition += (typeof rel.formLayoutListConditionExact !== "undefined" ? " && " + rel.formLayoutListConditionExact : "") _%>
  
  <%_ let formLayoutShowCondition = typeof rel.formLayoutShowCondition !== "undefined" ? rel.formLayoutShowCondition.map(v=>v.substring(0,v.indexOf('.'))+"SelectValue"+v.substring(v.indexOf('.'))).map(v=>"this.state."+v.split("=")[0]+" === "+v.split("=")[1]).join(" && ") : "true" _%>
  <%_ formLayoutShowCondition += (typeof rel.formLayoutShowConditionExact !== "undefined" ? " && " + rel.formLayoutShowConditionExact : "") _%>
  { <%- formLayoutShowCondition !== "true" ? "("+formLayoutShowCondition+") && " : "" _%> baseFilters !== '<%= relationshipFieldName %>' ?
      <Col md="<%= formLayoutSize %>">
        <%_ if(rel['formLayoutEmbebed'] === "true"){ %>

          <div className="entityEmbebedList">
            <<%= otherEntityNameCapitalized %>
              entityEmbebedPai ={fullEntityEmbebed}
              history={this.props.history}
              location={{
                pathname: `/<%= entityFileName %>/${this.props.match.params['id']}/<%= rel.otherEntityPath %>/`,
                search: '',
                hash: '',
                state: undefined,
                key: 'q2tbhd',
              }}
              match={{
                path: `/<%= entityFileName %>/:id<%= entityReactName %>/<%= rel.otherEntityPath %>/:id`,
                url: `/<%= entityFileName %>/${this.props.match.params['id']}/<%= rel.otherEntityPath %>/`,
                isExact: true,
                params: { id<%= entityReactName %>: this.props.match.params['id'], url: `/<%= entityFileName %>/${this.props.match.params['id']}/<%= rel.otherEntityPath %>/` },
              }}

              {...this.props.mapStateToProps<%= rel.relationshipNameCapitalized %>}
              {...mapDispatchToProps<%= rel.relationshipNameCapitalized %>List}


              getEntities={this.<%= relationshipName %>GetEntities}
              updateEntity={this.<%= relationshipName %>UpdateEntity}
              getEntity={this.<%= relationshipName %>GetEntity}
              createEntity={this.<%= relationshipName %>CreateEntity}
              deleteEntity={this.<%= relationshipName %>DeleteEntity}
              reset={this.<%= relationshipName %>Reset}
            
              <%= relationshipName %>List={this.props.<%= relationshipName %>ListEmbed}
              totalItems={this.props.<%= relationshipName %>ListEmbed ? this.props.<%= relationshipName %>ListEmbed.length : 0}
              loading={this.props.loading}

              <%= relationshipName %>Entity={this.props.<%= relationshipName %>Selected}
            />
          </div>
      <%_ } else { %>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
              </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <SelectAsync
                <%= ['many-to-many', 'one-to-many'].includes(relationshipType) ? "isMulti" : "" %> 
                id="<%= entityFileName %>-<%= relationshipName %>" name={"<%= relationshipFieldName %>"} 
                className={"css-select-control"} data-type-rel="<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                value={this.state.<%= relationshipFieldName %>SelectValue }
                onChange={(options) => this.setState({ <%= relationshipFieldName %>SelectValue: options })}
                defaultOptions={this.state.<%= relationshipName %>StartSelectOptions ? this.state.<%= relationshipName %>StartSelectOptions : []}
                loadingMessage={(input)=>(translate("selectAsync.loadingMessage"))}
                noOptionsMessage={(input)=>this.state.<%= relationshipName %>StartSelectOptions === undefined ? translate("selectAsync.loadingMessage") : translate("selectAsync.noOptionsMessage")}
                onMenuOpen={async ()=>{ 
                  if(this.state.<%= relationshipName %>StartSelectOptions === undefined){
                    const result = await getListAxios('<%= otherEntityApiLink %>', {<%- formLayoutListCondition %>}, 0, 100, '<%= showFields.split(";").length > 0 ? showFields.split(";")[0] : 'id' _%>,asc');
                    this.setState({<%= relationshipName %>StartSelectOptions: result.data ? result.data.map(p=>({...p, value: p.id, label: showFieldsSelectAsync(p, '<%= showFields %>') })) : []  })
                  }
                }} 
                loadOptions={async (inputValue, callback) => {
                  const result = await getListAxios('<%= otherEntityApiLink %>', {<%- formLayoutListCondition ? formLayoutListCondition+', ' : '' %>'<%= showFields.split(";").pop() %>.contains': inputValue}, 0, 100, '<%= showFields.split(";").length > 0 ? showFields.split(";")[0] : 'id' _%>,asc');
                  callback(
                    result.data ? result.data.map(p=>({...p, value: p.id, label: showFieldsSelectAsync(p, '<%= showFields %>')})) : []
                  );
                }}
              />
              </Col>
              <%_ if (superSelect){ _%>
                { this.renderModalSuperSelect(
                  '<%= relationshipFieldName %>',
                  '<%= otherEntityApiLink %>',
                  '<%= superSelect %>'.split(';'),
                  '<%= relationshipFieldName %>SelectValue',
                   <%= ['many-to-many', 'one-to-many'].includes(relationshipType) ? 'true' : 'false' %>, 
                   '<%= showFields %>'.split(';'),
                   '<%= showFields.split(";").length > 0 ? showFields.split(";")[0] : 'id' _%>,asc',
                   {<%- formLayoutListCondition %>}
                ) } 
              <%_ } _%>
            </Row>
          </AvGroup> 
        <%_ } %>
      </Col> : 
    <AvInput type="hidden" name="<%= relationshipFieldName %>" value={this.state.fieldsBase[baseFilters+"Id"]} /> }