
  <%_ const relationshipType = rel.relationshipType; _%>
  <%_ const ownerSide = rel.ownerSide; _%>
  <%_ const formLayoutLabel = rel.formLayoutLabel ? rel.formLayoutLabel : 'left' ; _%>
  <%_ const formLayoutSize = rel.formLayoutSize ? rel.formLayoutSize : 12; _%>
  <%_ const otherEntityName = rel.otherEntityName; _%>
  <%_ const otherEntityNamePlural = rel.otherEntityNamePlural; _%>
  <%_ const otherEntityNameCapitalized = rel.otherEntityNameCapitalized; _%>
  <%_ const relationshipName = rel.relationshipName; _%>
  <%_ const relationshipNameHumanized = rel.relationshipNameHumanized; _%>
  <%_ const relationshipFieldName = rel.relationshipFieldName; _%>
  <%_ const relationshipFieldNamePlural = rel.relationshipFieldNamePlural; _%>
  <%_ const otherEntityField = rel.otherEntityField; _%>
  <%_ const relationshipRequired = rel.relationshipRequired; _%>
  <%_ const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>

  <%_ let formLayoutListCondition = typeof rel.formLayoutListCondition !== "undefined" ? rel.formLayoutListCondition.map(v=>"v."+v.split("=")[0]+" === "+v.split("=")[1]).join(" && ") : "true" _%>
  <%_ formLayoutListCondition += (typeof rel.formLayoutListConditionExact !== "undefined" ? " && " + rel.formLayoutListConditionExact : "") _%>
  <%_ let formLayoutShowCondition = typeof rel.formLayoutShowCondition !== "undefined" ? rel.formLayoutShowCondition.map(v=>"this.state."+v.split("=")[0]+"SelectValue === "+v.split("=")[1]).join(" && ") : "true" _%>
  <%_ formLayoutShowCondition += (typeof rel.formLayoutShowConditionExact !== "undefined" ? " && " + rel.formLayoutShowConditionExact : "") _%>
  { <%- formLayoutShowCondition !== "true" ? "("+formLayoutShowCondition+") && " : "" _%> baseFilters !== '<%= relationshipFieldName %>' ?
      <Col md="<%= formLayoutSize %>">
        <%_ if(rel['formLayoutEmbebed'] === "true"){ %>

          <div className="entityEmbebedList">
            <<%= otherEntityNameCapitalized %>
              history={this.props.history}
              location={{
                pathname: `/<%= entityFileName %>/${this.props.match.params['id']}/<%= rel.otherEntityPath %>/`,
                search: '',
                hash: '',
                state: undefined,
                key: 'q2tbhd',
              }}
              match={{
                path: `/<%= entityFileName %>/:id<%= entityReactName %>/<%= rel.otherEntityPath %>/:id`,
                url: `/<%= entityFileName %>/${this.props.match.params['id']}/<%= rel.otherEntityPath %>/`,
                isExact: true,
                params: { url: `/<%= entityFileName %>/${this.props.match.params['id']}/<%= rel.otherEntityPath %>/` },
              }}

              {...this.props.mapStateToProps<%= rel.relationshipNameCapitalized %>}
              {...mapDispatchToProps<%= rel.relationshipNameCapitalized %>List}


              getEntities={this.<%= relationshipName %>GetEntities}
              updateEntity={this.<%= relationshipName %>UpdateEntity}
              getEntity={this.<%= relationshipName %>GetEntity}
              createEntity={this.<%= relationshipName %>CreateEntity}
              deleteEntity={this.<%= relationshipName %>DeleteEntity}
              reset={this.<%= relationshipName %>Reset}
            
              <%= relationshipName %>List={this.props.<%= relationshipName %>ListEmbed}
              totalItems={this.props.<%= relationshipName %>ListEmbed ? this.props.<%= relationshipName %>ListEmbed.length : 0}
              loading={this.props.loading}

              <%= relationshipName %>Entity={this.props.<%= relationshipName %>Selected}
            />
          </div>
        
        <%_ } else if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
                <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
                <%_ if (dto === 'no') { _%>
                  <%_ if (!relationshipRequired) { _%>
  
                    <Select 
                      id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"} data-type-rel="1-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                      value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                      options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                      onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                      name={"<%= relationshipFieldName %>"} 
                    />
                  <%_ } else { _%>
  
                    <Select 
                      id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"} data-type-rel="1-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                      value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                      options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                      onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                      name={"<%= relationshipFieldName %>"} 
                    />
                    <AvFeedback>
                      <Translate contentKey="entity.validation.required">This field is required.</Translate>
                    </AvFeedback>
                  <%_ } _%>
                <%_ } else { _%>
                  <%_ if (!relationshipRequired) { _%>
  
                    <Select 
                      id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"} data-type-rel="3-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                      value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                      options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                      onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                      name={"<%= relationshipFieldName %>"} 
                    />
                  <%_ } else { _%>
  
                  <Select 
                    id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"} data-type-rel="4-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                    value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                    options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                    onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                    name={"<%= relationshipFieldName %>"} 
                  />
                    <AvFeedback>
                      <Translate contentKey="entity.validation.required">This field is required.</Translate>
                    </AvFeedback>
                  <%_ } _%>
                <%_ } _%>
              </Col>
            </Row>
          </AvGroup>
        <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
              </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <%_ if (dto === 'no') { _%>
              
             
              <Select 
                id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"} data-type-rel="5-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === (p.id) ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                name={"<%= relationshipFieldName %>"} 
              />
              <%_ } else { _%>
  
                <Select 
                id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"} data-type-rel="6-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null }  
                options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                name={"<%= relationshipFieldName %>"} 
              />
              <%_ } _%>
            </Col> 
          </Row> <br />
          </AvGroup>
        <%_ } else if (relationshipType === 'many-to-many' && rel.ownerSide === true) { _%>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
              </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
  
              <Select 
                id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"} data-type-rel="7-<%= relationshipType %>-<%= ownerSide ? "owner-side" : "other-side" %>"
                value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue.split(',').includes(p.id+"") ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.filter(v => { try { return <%- formLayoutListCondition %>  } catch(error){ return false} }).map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options.map((option)=>(option['value'])).join(",") }) }
                name={"<%= relationshipFieldName %>"} 
              />
              </Col>
            </Row>
          </AvGroup> 
        <%_ } _%> 
      </Col> : 
    <AvInput type="hidden" name="<%= relationshipFieldName %>" value={this.state.fieldsBase[baseFilters+"Id"]} /> }