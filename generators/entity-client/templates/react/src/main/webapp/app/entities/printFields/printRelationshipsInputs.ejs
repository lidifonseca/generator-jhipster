
  <%_ const relationshipType = rel.relationshipType; _%>
  <%_ const ownerSide = rel.ownerSide; _%>
  <%_ const formLayoutLabel = rel.formLayoutLabel ? rel.formLayoutLabel : 'left' ; _%>
  <%_ const formLayoutSize = rel.formLayoutSize ? rel.formLayoutSize : 12; _%>
  <%_ const otherEntityName = rel.otherEntityName; _%>
  <%_ const otherEntityNamePlural = rel.otherEntityNamePlural; _%>
  <%_ const otherEntityNameCapitalized = rel.otherEntityNameCapitalized; _%>
  <%_ const relationshipName = rel.relationshipName; _%>
  <%_ const relationshipNameHumanized = rel.relationshipNameHumanized; _%>
  <%_ const relationshipFieldName = rel.relationshipFieldName; _%>
  <%_ const relationshipFieldNamePlural = rel.relationshipFieldNamePlural; _%>
  <%_ const otherEntityField = rel.otherEntityField; _%>
  <%_ const relationshipRequired = rel.relationshipRequired; _%>
  <%_ const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
  { baseFilters !== '<%= relationshipFieldName %>' ?
      <Col md="<%= formLayoutSize %>">
        <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
                <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                  <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
                <%_ if (dto === 'no') { _%>
                  <%_ if (!relationshipRequired) { _%>
  
                    <Select 
                      id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"}
                      value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                      options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                      onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                      name={"<%= relationshipFieldName %>"} 
                    />
                  <%_ } else { _%>
  
                    <Select 
                      id="<%= entityFileName %>-<%= relationshipName %>"  className={"css-select-control"}
                      value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(<%= entityInstance %>Entity.<%= relationshipName %> === p.id ? {value: p.id , label: p.id} : null)) : null} 
                      options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                      onChange={options => this.setState({ <%= relationshipName %>Id: options.map((option)=>(option['value'])).join(",") }) }
                      name={"<%= relationshipFieldName %>"} 
                    />
                    <AvFeedback>
                      <Translate contentKey="entity.validation.required">This field is required.</Translate>
                    </AvFeedback>
                  <%_ } _%>
                <%_ } else { _%>
                  <%_ if (!relationshipRequired) { _%>
  
                    <Select 
                      id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"}
                      value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                      options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                      onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                      name={"<%= relationshipFieldName %>"} 
                    />
                  <%_ } else { _%>
  
                  <Select 
                    id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"}
                    value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                    options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                    onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                    name={"<%= relationshipFieldName %>"} 
                  />
                    <AvFeedback>
                      <Translate contentKey="entity.validation.required">This field is required.</Translate>
                    </AvFeedback>
                  <%_ } _%>
                <%_ } _%>
              </Col>
            </Row>
          </AvGroup>
        <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
              </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <%_ if (dto === 'no') { _%>
  
              <Select 
                id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"}
                value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === (p.id) ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                name={"<%= relationshipFieldName %>"} 
              />
              <%_ } else { _%>
  
                <Select 
                id="<%= entityFileName %>-<%= relationshipName %>" className={"css-select-control"}
                value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue === p.id  ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null }  
                options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options['value']}) }
                name={"<%= relationshipFieldName %>"} 
              />
              <%_ } _%>
            </Col> 
          </Row> <br />
          </AvGroup>
        <%_ } else if (relationshipType === 'many-to-many' && rel.ownerSide === true) { _%>
          <AvGroup>
            <Row>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
                <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
              </Label>
              </Col>
              <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
  
              <Select 
                id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
                value={this.state.<%= otherEntityName %>SelectValue ? <%= otherEntityNamePlural %>.map(p => { return this.state.<%= otherEntityName %>SelectValue.split(',').includes(p.id+"") ? {value: p.id , label: p.<%=otherEntityField%>} : null }) : null } 
                options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
                onChange={options => this.setState({ <%= otherEntityName %>SelectValue: options.map((option)=>(option['value'])).join(",") }) }
                name={"<%= relationshipFieldName %>"} 
              />
              </Col>
            </Row>
          </AvGroup> 
        <%_ } _%> 
      </Col> : 
    <AvInput type="hidden" name="<%= relationshipFieldName %>" value={this.state.fieldsBase[baseFilters]} /> }