<%_ const formLayoutLabel =  field.formLayoutLabel ?  field.formLayoutLabel : 'left' ; _%>
<%_ const formLayoutSize =  field.formLayoutSize ?  field.formLayoutSize : 12; _%>
<%_ const formLayoutClassName = typeof field.formLayoutClassName !== 'undefined' && field.formLayoutClassName.trim() ? field.formLayoutClassName.split("**") : []; _%>
<%_ const formLayoutInputMask = typeof field.formLayoutInputMask !== 'undefined' && field.formLayoutInputMask.trim() ? "mask='"+field.formLayoutInputMask.split("**").join(" ")+"' tag={InputMask}" : ""; _%>
<%_ const formLayoutCepBr = typeof field.formLayoutCepBr !== 'undefined' && field.formLayoutCepBr.trim() ? field.formLayoutCepBr : ""; _%>

<% const rulesValidate = field.fieldValidateRules ? field.fieldValidateRules : ""; _%>
<% const fieldType =  field.fieldType; _%>
<% const fieldName =  field.fieldName; _%>
<% const fieldNameHumanized =  field.fieldNameHumanized; _%>
<% const formLayoutShowCondition = typeof field.formLayoutShowCondition !== "undefined" ? field.formLayoutShowCondition.map(v=>"this.state."+v.split("=")[0]+"SelectValue === "+v.split("=")[1]).join(" && ") : undefined; _%>
{ <%- formLayoutShowCondition ? "("+formLayoutShowCondition+") && " : "" _%> baseFilters !== '<%= fieldName %>' ?
  <Col md="<%= formLayoutSize %>"
    <%_ if (formLayoutClassName.length > 0) { _%>className="<%= formLayoutClassName.map(v=>v+'-container').join(" ") %>"<%_ } _%>
    >
      <AvGroup>
        <Row>
          <%_ if (typeof field.formLayoutType !== "undefined" && field.formLayoutType === "HtmlEditor") { _%>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className={"mt-2" <%_ if(rulesValidate.includes('required')){ %> + (this.state.<%= fieldName %>SelectValue === "" ? " text-danger" : "")<% } %>} 
                  id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>"
                >
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
              </Label>
            </Col>

            <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <ReactQuill 
                value={this.state.<%= fieldName %>SelectValue}
                onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt })} 
                modules={quillEditorModules} 
                formats={quillEditorFormats}
              />
            </Col>
          <%_ } else if (formLayoutCepBr) { _%>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className={"mt-2" <%_ if(rulesValidate.includes('required')){ %> + (this.state.cepRequest<%- formLayoutCepBr.slice(0, 1).toUpperCase() + formLayoutCepBr.slice(1).toLowerCase() %>  ==="" 
                  ? " text-danger" : "")<% } %>} id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>"
                >
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
              </Label>
            </Col>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <input id="<%= entityFileName %>-<%= fieldName %>"  type="text" name="<%= fieldName %>"  <%- formLayoutInputMask %> 
              className={"form-control" <%_ if(rulesValidate.includes('required')){ %> + (this.state.cepRequest<%- formLayoutCepBr.slice(0, 1).toUpperCase() + formLayoutCepBr.slice(1).toLowerCase() %> ===""
                ? " is-touched is-pristine av-invalid is-invalid" : "")<% } %>}  
              value={this.state.cepRequest<%- formLayoutCepBr.slice(0, 1).toUpperCase() + formLayoutCepBr.slice(1).toLowerCase() %> }  
              <%_ if(formLayoutCepBr == "cep"){ _%>
                tag={InputMask}
                mask="99999-999"
                onBlur={inputVal => {
                  viacepRequest( inputVal.target.value, (cepRequest: any)=>{this.setState(cepRequest)});
                  this.setState({<%= fieldName %>SelectValue: inputVal.target.value});    
                  this.setState({cepRequest<%- formLayoutCepBr.slice(0, 1).toUpperCase() + formLayoutCepBr.slice(1).toLowerCase() %>: inputVal.target.value ? inputVal.target.value : ""}); 
                }}
              <%_ } else { _%>
                onBlur={inputVal => this.setState({cepRequest<%- formLayoutCepBr.slice(0, 1).toUpperCase() + formLayoutCepBr.slice(1).toLowerCase() %>: inputVal.target.value ? inputVal.target.value : ""}) }  
              <%_ } _%>
              onChange={inputVal => {this.setState({cepRequest<%- formLayoutCepBr.slice(0, 1).toUpperCase() + formLayoutCepBr.slice(1).toLowerCase() %>: inputVal.target.value}); this.setState({<%= fieldName %>SelectValue: inputVal.target.value}); } } 
              />
            </Col>
          <%_ }  else if (fieldType === 'Boolean') { _%>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
              </Label>
            </Col>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <div className="switcher switcher-success">
                <input
                  type="checkbox"
                  name={'<%= fieldName %>_checkbox'}
                  id={'<%= fieldName %>_checkbox'}
                  defaultChecked={this.state.<%= fieldName %>SelectValue}
                  onChange={evt => this.setState({ <%= fieldName %>SelectValue: !this.state.<%= fieldName %>SelectValue })} 
                />
                <label htmlFor={'<%= fieldName %>_checkbox'} />
              </div>
            </Col>
          <%_ } else if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
              </Label>
            </Col>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
            <AvInput onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} validate={{ <%- include('../react_validators') -%> }}  id="<%= entityFileName %>-<%= fieldName %>" type="date" className="form-control"
                name="<%= fieldName %>" placeholder={"YYYY-MM-DD"} value={isNew ? null :
                convertDateFromServer(this.props.<%= entityInstance %>Entity.<%= fieldName %>)}
                 />
            </Col>
          <%_ } else if (fieldType === 'LocalDate') { _%>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
              </Label>
            </Col>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <AvField onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} id="<%= entityFileName %>-<%= fieldName %>" type="date" className="form-control" name="<%= fieldName %>"
                 />
            </Col>
          <%_
        } else if ( field.fieldIsEnum) {
          const values =  field.fieldValues.replace(/\s/g, '').split(',');
      _%>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
            <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
            </Label>
          </Col>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
          <AvInput onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} validate={{ <%- include('../react_validators') -%> }} id="<%= entityFileName %>-<%= fieldName %>" type="select" className="form-control"
            name="<%= fieldName %>" value={(!isNew && <%= entityInstance %>Entity.<%= fieldName%>) || '<%= values[0] %>' }>
            <%_
            const enumPrefix = angularAppName + '.'+ fieldType;
            for (key in values) {
                const value = values[key];
          _%>
            <option value="<%= value %>">
              <%_ if (enableTranslation) { _%>
              {translate("<%= enumPrefix %>.<%= value %>")}
              <%_ } else { _%>
              <%= value %>
              <%_ } _%>
            </option>
            <%_ } _%>
          </AvInput>
          </Col>
          <%_ } else if (['Integer', 'Long', 'Float', 'Double'].includes(fieldType)) { _%>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
              <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
              </Label>
            </Col>
            <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
                <AvField onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} id="<%= entityFileName %>-<%= fieldName %>" type="string" className="form-control" name="<%= fieldName %>" /> 
            </Col>
          <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) {

              const fieldBlobType =  field.fieldTypeBlobContent;
              if (fieldBlobType !== 'text') {
                const isAnImage = fieldBlobType === 'image';
                const capitalizedFirstLetter =  _.upperFirst(fieldName);

          _%>
              <Col md="<%= formLayoutSize %>">
                <AvGroup>
                  <Row>
                    <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
                      <Label className="mt-2" id="<%= fieldName %>Label" for="<%= fieldName %>">
                        <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                          <%= fieldNameHumanized %>
                        </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
                      </Label>
                    </Col>
                    <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
                      <br />
                      {(<%= fieldName %> || <%= fieldName %>Base64)  ? (
                      <div>
                        <Row>
                          <Col md="11">
                          </Col>
                          <Col md="1">
                          <Button color="danger" onClick={this.clearBlob('<%= fieldName %>')}>
                            <FontAwesomeIcon icon="times-circle" /></Button>
                          </Col>
                        </Row>
                        <a rel="noopener noreferrer" target={"_blank"} href={`${<%= fieldName %>}`}>
                          <%_ if (isAnImage) { _%>
                          <img src={`${<%= fieldName %>Base64  ? ('data:'+<%= fieldName %>ContentType+';base64,'+<%= fieldName %>Base64) : <%= fieldName %>}`}
                            style={{ maxHeight: '100px' }} />
                          <%_ } else { _%>
                          <Translate contentKey="<%= i18nKeyPrefix %>.btnOpen">Open</Translate>
                          <%_ } _%>
                        </a>
                        <br />
                      </div>
                      ) : null}
                      <input id="file_<%= fieldName %>" type="file" ref={this.<%= fieldName %>FileInput} onChange={this.onBlobChange(<%= isAnImage %>, '<%= fieldName %>', this.<%= fieldName %>FileInput
                        )} <% if (isAnImage) { %>accept="image/*" <% } %> />
                      <AvInput onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} type="hidden"  name="<%= fieldName %>" value={<%= fieldName %>}  />
                    </Col>
                  </Row>
                </AvGroup>  
              </Col>
        <%_ } else { _%>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
            <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
            </Label>
          </Col>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
            <AvInput onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} validate={{ <%- include('../react_validators') -%> }} id="<%= entityFileName %>-<%= fieldName %>" type="textarea" name="<%= fieldName %>"  />
          </Col>
        <%_ } _%>
      <%_ } else { _%>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
          <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate><%= (rulesValidate.includes('required') && rulesValidate.fieldType !== 'Boolean') ? "(*)" : "" %>
          </Label>
        </Col>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
          <AvInput onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} validate={{ <%- include('../react_validators') -%> }} id="<%= entityFileName %>-<%= fieldName %>" type="text" name="<%= fieldName %>" className={"form-control"} <%- formLayoutInputMask %> />
        </Col>
      <%_ } _%>
      <%_ if ( field.javadoc) { _%>
        <UncontrolledTooltip target="<%= fieldName %>Label">
          <%_ if (enableTranslation) { _%>
            <Translate contentKey="<%= i18nKeyPrefix %>.help.<%= fieldName %>" />
          <%_ } else { _%>
            <%=  field.javadoc %>
          <%_ } _%>
        </UncontrolledTooltip>
      <%_ } _%>
        </Row>
      </AvGroup>
    </Col> : 
    <AvInput onChange={evt => this.setState({ <%= fieldName %>SelectValue: evt.target.value })} type="hidden" name="<%= fieldName %>" value={this.state.fieldsBase[baseFilters]} /> }