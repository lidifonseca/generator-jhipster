

<%_
let hasRelationshipQuery = false;
let hasOneToOneNotOwner = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if(rel.relationshipType ==="one-to-one" && rel.ownerSide  === false && typeof baseFilters !== 'undefined' && baseFilters === rel.relationshipName  ){
        hasOneToOneNotOwner = true;
      }
      if (rel.relationshipType === 'many-to-many') {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key]) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add({"namePlural": uniqueRel.otherEntityNamePlural, "name": uniqueRel.otherEntityName, "relationshipFieldName": uniqueRel.relationshipFieldName });
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      formLayoutListCondition: uniqueRel.formLayoutListCondition,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
  }
}); 
_%>

/* eslint complexity: ["error", 300] */
<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
    if (fields[idx].fieldIsEnum === true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
// const query = generateEntityQueries(relationships, entityInstance, dto);
// const queries = query.queries;
// const variables = query.variables;
// let hasManyToMany = query.hasManyToMany;
_%>
import React from 'react';
import { connect } from 'react-redux';
<%_ let baseFiltersModal = false; _%>
<%_  if(this.generator.baseFiltersAttributes && this.generator.baseFiltersAttributes['window'] === "modal") { _%>
<%_ baseFiltersModal = true; _%>
import { Modal as Panel, ModalHeader as PanelHeader, ModalBody as PanelBody } from 'reactstrap';
<%_ } else { _%> 
import {Panel, PanelHeader, PanelBody} from 'app/shared/layout/panel/panel.tsx';
<%_ } _%> 
import { AvForm } from 'availity-reactstrap-validation';
import { <%= entityReactName %>Update, mapStateToProps, mapDispatchToProps } from '../<%= entityFileName %>-update';
import { IRootState } from 'app/shared/reducers';


export interface IUpdateExtendedState {
  dumystate?: any;
}

  export class <%= entityReactName %>ExtendedUpdate extends <%= entityReactName %>Update {
      renderHeader() {
        return <> { super.renderHeader() } </>
      }

      renderBody() {
        return <> { super.renderBody() } </>
      }

      render() {
        const { <%= entityInstance %>Entity,<%uniqueRealtionFields.forEach(rel => { %> <%= rel.namePlural %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      , <%= b.fieldName %>Base64
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>
      const baseFilters = this.state.fieldsBase && this.state.fieldsBase['baseFilters'] ? this.state.fieldsBase['baseFilters'] : null;

      return (
        <div>
            <AvForm model={isNew ? {
              <%_ for (idx in fields) { _%>
                <%_ if (typeof fields[idx].formLayoutDefault !== "undefined") { _%>
                  <%= fields[idx].fieldName %>: <%- fields[idx].formLayoutDefault %>,
                <%_ } _%>
              <%_ } _%>
            } : {
              ...<%= entityInstance %>Entity, 
              <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
            } } onSubmit={this.saveEntity}>
          <Panel <%_ if(baseFiltersModal) { %> isOpen <%_ } %>>
            <PanelHeader>
              { this.renderHeader() }
            </PanelHeader>
            <PanelBody>
              { this.renderBody() }
            </PanelBody>
          </Panel>
        </AvForm>
      </div>
      );
      }
      }

      export const mapStateToPropsExtended = (storeState: IRootState) => {
        const listBase = mapStateToProps(storeState);
        return {
          ...listBase, 
          listProcediment: storeState.patDrPrescrProcd.entities
        };
      };
      
      export const mapDispatchToPropsExtended = {
       ...mapDispatchToProps
      };
      export type StatePropsExtended = ReturnType<typeof mapStateToPropsExtended >;
        export type DispatchPropsExtended = typeof mapDispatchToPropsExtended;
          export default connect(mapStateToPropsExtended, mapDispatchToPropsExtended)(<%= entityReactName %>ExtendedUpdate);